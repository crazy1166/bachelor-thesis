%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Japanese%%Title: waseda_logo_bw.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.0%AI9_PrintingDataBegin%%For: Hiroo Ishikawa%%CreationDate: 05.10.8%%BoundingBox: 0 0 172 113%%HiResBoundingBox: 0 0 171.8770 112.7784%%CropBox: 0 0 171.8770 112.7784%%LanguageLevel: 3%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x199 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 84 8%%BeginData: 12126 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD3EFF27F82752FD7CFFF8F8F827FD7BFF7D21F8F8F8FD6DFF7620%27F8272027F8272027F8272021FD05F8272027F8272027F8272027F852FD%5EFF7DF820F827F820F827F820F827F820F827F820F827F820F827F820F8%27F820F827F84BFD5DFF27FD22F87DFD5CFF4BF821F8F8F821F8F8F821F8%F8F821F8F8F821F8F8F821F8F8F821F8F8F821F8F8F8217DFD5CFF27FD04%F8524B4BFD072721FD04F8FD0A27FD05F87DFD5CFF4BF827F827FD0AFF52%20F827F8FD0BFFF820F8277DFD5CFF27F8F8F820FD0AFF52F8F8F821FD0B%FF21F8F8F87DFD5CFF4BF8F8F827FD0AFF5221F8F8F8FD0BFFF821F8F87D%FD5CFF27FD04F8FD0AFF52F8F8F820FD0BFF20F8F8F87DFD5CFF4CF820F8%27FD0AFF5227F820F8FD0BFFF827F8207DFD5CFF27FD04F8FD0AFF52F8F8%F820FD0BFF20F8F8F87DFD5CFF4BF821F827FD09FFA8F8F8F821F852FD0A%FFF8F8F8217DFD5CFF27F8F8F820FD07FF7D27FD07F82052FD08FF21F8F8%F87DFD5CFF52F827F827FD05FFA82121F827F820F827F820F827207DFD06%FF2020F827A8FD5CFFA820F82076FFFFFF7D27FD0FF82152FD04FFA1F820%20FD5FFFA1A8FFFFA82021F8F8F821F8F8F8275227F821F8F8F821F8F8F8%7DFD67FF7D27FD09F876FD04FF20FD08F82776FD64FF2127F820F827F820%F82776FD07FFA827F827F820F827F82120A8FD56FFA827524B76FD05FF4B%FD09F84CFD0CFF2020FD07F8277DFD04FF7DF827202727A8FD44FFA84B52%4B27277D7DA12727A8FFFFA8F821F8F8F821F82127FD0FFFA827F8F8F821%F8F8F821FFFFFFA8207D4B527D7DF821202127A8FFFF7DA8FD04FFA8A8FD%2AFF4B7DFFFFFF5227F87DA827F84B7D52F827F827F821204BA8FF4BFD06%F852FD14FF21FD06F8A8FF76F821277D524BF82727A8A876F87652272027%76FFFFA8F8FD29FF7DF8FFFF7D21527D7D272776FF7D27217627767DA127%275227767DF827F82127FD17FFA84BF820F827FF2727FF7D272127202752%7D274BA8FF2727524CA82727FFFF4B27FD28FFF876FF52F87D52277D217D%FF27277DFF20522727F87DFFFFA827FF7D2752A8FD1AFFA82727A8FF76FF%FFFF7D2752FFA827A8FF76204B7DF8FF27272720F87DA8F8FD27FF5221A8%27277D2727A87D2027F84BFFFF4B277DA14B5221A8FD05FF4BA8FD1CFFCA%27FD04FFA127274B272027202752A8214B4B2727FF2776A8A8F87D272752%FD23FF7DF827F8217DFFF8272752F87D5227F827F84B4B52277D27272721%52FFFF27F8F84B524C524B524CA8FF27F827A8FFFFA8F82121FF7D524C52%4B524C52F8F8F8FF7D27277D272776FFFF7D5227F82727205252F84BF827%7DFFF821F827F8FD21FF7D20774B2752FF2176F8274C76F8527D27F84C20%272152F827F852A82752FFF820F827F820F827F820F8CA2120F827274BF8%27F8277D27F820F827F820F827F827FFA17DFF2076522720272052522727%4BA85221A127277D2752A8217D277D27FD20FFF8FFF8FFF8FFF876272752%2727FF7D21F87620FF277D7D52F87D2752FFFFFFFD0BF87DFFFD07F827FF%7DFD0BF8FFFFFFF876F84BA8FF204CA8207D212727A8A8204BFD04274B27%FF217627A8FD1EFF7D272021A82720F8202727274B7D27277D2752275276%F852FFFF2727F8A8FFFFF821F84C527652525276A8FFFF52F8F8F821F821%52FFFFA852765252527627F8F827FFFF7D2720A1FFA1F827524B7D274BFF%27272027214B52764B27F87DF82720A1FD1EFF52F8274B27F8FF7D272076%4B27F8A8F87D7D277620274BF82152FF4C277DFFFFF8F821FD09FF4BF8F8%F821FD04F827FD09FFF8F8F8FFFFA8F8272727F8275227F827F8FF2752A8%207D7D2752F827A876F877F82727FD1EFF21A8F8FFF87D274B7DFFF852A8%4C27FFF8CA2021F827A87D4B27F827F852FFFFF827F82721272727212752%FF2727F87DFFFF4B27F84BFF4BF827F827F827F820F827FFA82076272727%527DA821274B27524BA1277D52F8277DFF7D272727A827A827FD1DFFA827%7D4B7D20F8A8FFFFF8525227524C207D2027FF7D277DA827274B27FF277D%FFFD0BF8525220A1FD04FF5227524BFD0BF8FF5252FF212752F8FF7652FF%FFF85227277D274BA852274BA8A827F84B277DF87DFD1DFFF827F84B2727%2027F827F8275227FFA12727F8A8FF7D27FF20522727A8A127FFF8F8F827%F827F827F82121FF20F8F827A8A8F821F827A827F827F827F827F821F827%FF527D7DFD0427A827A1FF27272077FFA121272752522720272727527620%27FD1EFF5221A8F84B275227274BFFA152F82152FF7DA7F876A8274B27F8%2152277D4BFFF8F8F8A8FD08FF52FD07F8207DFD09FFF8F8F8FF277DF87D%F827272752FF2152FFFFA8212727277652214BA84B277D214B5252FD08FF%A8527D7D7DA1FF762127F827F8277DFD07FF7652F8A1A827207DA84B2027%2777A84C4CFFFFFFA1FFFF52204B4B4B275252FFF820F8A8FD09FFA8F827%F820F827A8FD09FFA127F827FFA1274B21A87D27A8FD06FF2776522727F8%27A1A1204C277DFF4C277DFD06FFA827F8272720F827F87D7627272076F8%2727FFA8A8FFFFFFA1F87DFF2752FF27277D272752FD04274B7DFD05FF27%FFFF7D27F8FFFFFD0AF821FF7DF8F8F820F8F8F82152FFFD0BF8FFFF2727%FFFFFF20FFFFFFA8762027F85252A8FF27524B20A8FF4CF87D272076FFFF%7D27767D21F852272776FD07FFA82052F84B207DF82727A87D27F8272727%52FF7D2752277DA15227277D272727FFFFFF20FFFFFFA827FFFFF821F8F8%F821F8F8F821F87D2121F8277D7DF8F8F82752F8F821F8F8F821F8F8F827%FFFFF8FD04FF27FFFF7D2752A8FFA827272752207652FF7D2727A84B2727%7D2720F8527D27F8762052FD0BFF2727F84B27FF20F8F8212127FFFFA84B%F84B5227F8272052A8FD04FF76A1FFFF27FD04FF27A8FF7DF8272027F827%2027F87DFF7D277DFD04FF522776FF4C27F8272027F8272027A1FF764BFD%04FFF8FD0AFF2727272027F84BA8FFFFFFF820F8F8F8A77D21214BF8A8FD%0DFF274BF82727FF7627F827F8A8FD04FF7D27A17D5227FD0AFF4BFD04FF%7D52FFFFA852765276527652765276527652765276527652765276527652%76527652767DFFFF527DFD04FFCAFD09FFA8214C7DFF20FD05FF4B27F827%27FFA8274B4B21A8FD0FFF2752F82752FF7D2020272076FD04FF20A8A827%277DFFFFFFA8FD0AFFA827FF52FD20F827FF27FD09FFA8764B52A8FF7D4C%F8FF5252FD04FF274BF82727FFFF274B272076FD11FFF85227277DFFA121%274B207DFFFFFFA8F8FF27277DA82727202727A8FD08FF7DFFF8F8F821F8%F8F821F8F8F821F8F8F821F8F8F821F8F8F821F8F8F821F8F8F821F8F8FD%0AFF4B274BA152274BA1217D5227A8FFFFFF27762052F8FFFF5227272752%FD12FFA7F8274C21A8FFF821205220A7FFFFFF76F852F8A8F87DFFFFFF76%F852FD09FF21F8F8F8272027F8272027F8272027F8272027F8272027F827%2027F8272020F8F8F8FD08FFA7F852A8A87DA8FF204C27F827A8FFFFFF27%272027F827FFA7F8272721A8FD13FF524B275252FF272727217DF8FD04FF%CA52A820277627214B7DFF4B27A8FD07FFF820F8A1FFFF7DFFFFFFA8A17D%A17DA17DA17DA17DA17DA1FFFFFF7D52FFA827F820FD07FFA8F8A8A84B21%52F827F82776FF7DA1FFFF7D274C4BF8764BFF207627277DFD14FFA82152%27F87D5252F84BF87620FFFF52F84CF876F82752FF7D2727FF524BFD07FF%21F8F87DFF27F84BFF52FD0EF827FF7DF82052FFF8F8F8FD06FFA8F8A852%2176FFFFFF4B27A827F82727FFA82076272021277D2752F87627FD16FF7D%272776F8A12727F852272776FF4B7D524BFF52527DA1FFFF7620A82752FD%06FFF821F8A1FF27F821FF27F8F8F821F8F8F821F8F8F821F8F8F8FF27F8%F827FFF8F821FD06FFF8A15227A8FF7D4B20277DFF27A87D52FF52522752%2727277627277DF8FD18FF2752F85227274C4B27277621A8764CFFF8FFA8%F8272720A7FFA8F8A7F87DFD05FF20F8F87DFFF8F8F8FFFD05F821F820F8%21F820F8F8F820FF27F8F8F8FFF8F8F8FD05FF27525227A8FF27277DFFF8%FFFF21FF4B7DA8F8524B212752F8215227217DFD19FFF87D272727762127%7D274B52A827FF27FFFF20FFFFA82052FFA820A8F8FD05FFF827F8A1FF27%F827FF27F82027FD09FFF820F8FF2720F827FF20F827FD04FF7D277D27A8%A82076FFFF7D4CFFA821FF21FF217D217D4B2752274B277627FD1AFF7D27%274B272727524B4B52F8A8F8A8277DFF524BFFFFFF2727A876F87D27FD04%FF20F8F87DFFF8F8F8FFF8F8F827FD09FF21F820FF27F8F8F8FFF8F8F8FF%FFFFA8277D20A87DF8A8FFFFFF277DFF4B767D4B7627F87DF8762727F84B%4B27A8FD1BFF277D272727525220A8F876277D4BA820FFA827FD04FF5227%A85252277DFFFFFFF8F8F8A1FF27F827FF27F82120A17DA17DA17DA17D7D%F821F8FF2021F827FF21F8F8FFFFFF524B277D7DF8FD04FFA827FFA827A8%277D27524B5252277DF87627524BFD1CFFA1275227F852F87D277D27277D%27A82752FF4B52FD04FF7D217D217627FFFFFF21F8F87DFFF8F8F8FF20FD%0EF821FF27F8F820FFF8F8F8FFFFFFF852277620FD05FF207DFF4B527D27%524B21A8217D27F827F87DF8FD1EFF4C522176F85252277D277D27524BA8%27A8FF20CAFD04FFA1277627277DFFFFF820F8A1FF27F827FF27F827F820%F827F820F827F820F827F8FF2127F827A827F820FFFF4C52204B27FD05FF%764BFFA820FFF87D207D4B7D4B4C5227277627A1FD1FFFF87DF852272076%277D272752207D274CFF7D20FD05FF7D20274B20FFFF21F8F87DFFF8F8F8%FFFF27F8272027FD05F8272027F87DFF27F8F8207DF8F8F8FFFF27F82727%FD05FFA820A8FFF8A82752F87DF8A8F87DF82752274B4CFD20FFA1275227%27275220A1277DF87D20FFF8A1FF4B52FD05FFA127F827A8FFF821F8A1FF%27F827FD07FF21F82127FD07FF27F8F8277DF8F821FF7D202727FD06FF27%7DFF4B52A127525227524B52272752277D27A8FD21FF4B4C275227F87DF8%A8F87DF8524BA7F8FFA8217DFD05FF7DF8F84BFF20F8F87DFFF8F8F8FD07%27F8F8F820FD072720F8F8F87DF8F8F8FF20F827FD06FF5227FF7D21FF27%52217D27A821522127274B2776FD22FFA827A1277D27204C767627524C27%7D7D27FF7D27A8FD05FF7D27F8FFF827F8A1FF27F820F827F820F827F820%F827F820F827F820F827F820F8277D20F827FF2027FD06FF7D21FFA827A8%524C277D27A1275227277D277D27FD24FF76277D277DF82721A8277D2752%20A84B4BFF5227A8FD05FF7D207D27F821A8FFFD18F827A8F8F8F87DF8FD%06FFA8F8FFA8277D76F84C4B4B277D2027F8A8F8A8F8FD26FF2752524B7D%204B27A8277D275227FF2752FF5227FD06FF7DA8A827A8FFFFFF21272727%202727272021F8F8F82727272027272720274BFFFF27F8A8FD07FFA8F8FF%A82752A82076277D27FFF827F8A1F8A8277DFD27FFF8A827277620205276%217D272727A82752FF5227FD16FFF8F8F827FD15FFA8F8A7FF2752FFF852%F87DF8FFF82727FF20A75227FD28FFA120FF2752A827F8A8524C76272752%A82752FF764BFD0AFF272721272727212727272027F82021FD14FFA8F8A8%A84B76FF205221A1F8A8272752FF217D7D27A8FD29FF5227FF2752FF4BF8%A8274B7D20F876A82752FF5227FD08FFFD0FF827FD13FFA8F8A8A82752FF%F82720A8207D2721A8FFF876A8277DFD2BFF2752FF274BFF7D2052274BA1%27F87DA82752FF5227A8FD05FF52F8F821F8F8F821F8F8F821F8F8F82127%FD12FFA1F8A8A82752FFF8274BFF2052F87DFFA8207DFF2752FD2CFFA821%52FF2727A8FF5220F827A827F852A82727FF5221A8FD05FFF8F8F821F820%F821F820F821F820F8FD12FF76F8FF7D2152FFF8207DA8F8F827FFFF7DF8%A8FF2752FD2EFFA82776FF5227A8FFA852F827FF7DF87DFF4C27FF5227A1%FD24FF5221FF7D277DFF2152FF7DF827A8FFFF5220CAA82752FD30FFA827%52FF7D2176FFFFA8F82052FF274BFF76F8A87D2752FFFFFFA87D7DFD15FF%7D27F8A8FFFFA82727FF2727A8A8F876762727A1FFFFA82727FF7D2752FD%33FF4B27FFA82727A8FFFFA84BF852274BFFA8F87DA82727FFFF4B274BF8%7DFD11FFA12027A8A8F8FF52277DA82752FFA1F84BF84BA8FFFFFF4B277D%FF52277DFD35FF7DF87DFF7DF852A8FFFFFF5227F827A8FF2127A852F852%F8FFFFA8272152FD0DFF522727A8FFFFFF27F84BA876F87DFF7DF84B7DFD%04FF76F852FFA7F84BA8FD38FF27277DFF4B2752FD05FF5227A1FF52277D%FF2127A8FFFFFFA84B207DA8FF7DFD04FFCAFF7DF84CA8FFFFFF7D52F852%A12727FFFF5221FD05FF762727FFA84B21A1FD3BFF7D2727A8A852F852A8%FFFFFF7D2752FFA84B20522727F82727524B52F820204BF827F827F820F8%27F827F827F852522720277DFFA8274BFFFFFFA852F84CA8FF272152FD3F%FFA1274BA8FF522727A8FFFFA82727FFFFA12721FFFFA8A17DA152524B27%FD06FF20FD09FFF8A1FFFF4B277DFFFFA827274BFFA852207DFD43FF7D27%27A8FF76F82752FFFF7DF852FFFFF8A8FD08FFF8FD06FF21FD08FF7D27FF%7DF852A8A84B27217DFFA8272052FD47FFA127277DFFA876204B52A84B27%767D4BFD08FF27FD05FFA827FD08FF4C5227277D4B27277DA8FF7D27277D%FD4BFFA827F876A8FFA8522727F821F8F8A8FD06FFA8F8FD05FF7D4BFD07%FF7DF8272027277DFFFFA876F8277DFD50FF4B2727A8FD06FF4B27A8FD05%FF277DFD06FF20A17D524B524B4B20A8FD05FFA827274BFD55FF7DF82027%FFFFFFA14BF827F8272020F821FD07FF272752527D7D7D524BF827277D27%F8F827FD58FFA1F827F827214B76FD07FF27FFFFFF7DA8FFFF277DFD08FF%7D7D2727F87DFD5BFF7D2727A8FD09FF27F827F8522727F821F87DFD08FF%272152FD5FFFA1277DFD06FFA82720A8FD07FFA82727A8FD05FF2752FD62%FF7DF8FD05FF27217DFD0BFF762052FD04FF2752FD61FFA127A8FFFFFFA1%2052FD0EFFA84B27FD04FF5227FD5EFFA852F8FFFFFFA84C20A8FD11FF7D%F876FFFFFF76F852A8FD5AFF4B2752FFFFA852274BFD15FF2727277D7D7D%202752FD58FFF8F8F827F8272052A8FD18FF7D4B524B522752FD2BFFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin3 3010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2005-10-08T20:03:55+09:00</xap:CreateDate>
         <xap:ModifyDate>2005-10-08T20:03:55+09:00</xap:ModifyDate>
         <xap:MetadataDate>2005-10-08T20:03:55+09:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>168</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAqAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqoX+oWGnWct7qFzFZ2UC8p7m4dYokXpV3chVHzOKse/5Wr+V/wD1OGif9xG0/wCqmKaL&#xA;v+Vq/lf/ANThon/cRtP+qmK0Xf8AK1fyv/6nDRP+4jaf9VMVovm3/nL78xtK1s+X9F8u63b6jpyL&#xA;PdagthcpPE0hKJCJfSZl5IFcrU1+LFlFNP8AnEb8zdI0zy9rWh+ZvMNrp9raTwzaTDqNzHAAswf1&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:3964C91339C811DABD608CC6EF5E5645</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3964C91439C811DABD608CC6EF5E5645</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:3964C91239C811DABD608CC6EF5E5645</stRef:instanceID>
            <stRef:documentID>uuid:3964C91139C811DABD608CC6EF5E5645</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=400 GradRes=200 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -112.778 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 112.778 li171.877 112.778 li171.877 0 licpclp[1 0 0 1 0 0 ] concat65.2676 24.1011 mo66.7129 24.1011 67.7305 22.8701 67.7305 21.5845 cv67.7305 20.521 67.6816 10.8735 67.6816 10.3931 cv67.6816 9.91357 68.2153 9.54492 68.6953 9.54492 cv69.1758 9.54492 81.8101 9.64209 82.2925 9.64209 cv82.7734 9.64209 83.0957 10.0737 83.0957 10.5562 cv83.0957 10.9565 83.0957 16.8276 83.0957 18.8022 cv83.0957 19.2036 82.7842 19.604 82.2402 19.8765 cv78.6445 21.7007 64.8838 28.6821 63.7686 29.2397 cv62.4834 29.8833 62.4834 32.4531 63.126 33.3091 cv63.7686 34.1655 65.4814 34.1128 66.5522 33.6841 cv67.4707 33.3159 80.875 26.2437 84.6738 24.3745 cv85.3032 24.0679 85.9194 24.0161 86.3672 24.2437 cv89.7529 25.9575 104.236 33.3062 104.991 33.6841 cv106.384 34.3794 107.937 33.5234 108.365 32.8813 cv108.793 32.2388 109.114 30.2573 107.616 29.5083 cv106.669 29.0342 93.2476 22.2471 89.1782 20.1934 cv88.4482 19.8218 88.0264 18.9595 88.0264 18.9595 cv88.0264 18.9595 88.1172 10.8228 88.1172 10.4487 cv88.1172 10.0737 88.3413 9.59229 88.8232 9.59229 cv89.3057 9.59229 102.422 9.59229 102.851 9.59229 cv103.278 9.59229 104.025 9.69971 104.025 10.4487 cv104.025 11.1982 103.975 20.0449 103.975 21.1021 cv103.975 23.1372 105.367 23.8335 106.438 23.8335 cv107.509 23.8335 108.633 23.0835 108.633 21.2632 cv108.633 20.1934 108.633 7.98584 108.633 6.91455 cv108.633 5.84424 107.348 4.98779 106.277 4.98779 cv105.34 4.98779 92.1758 4.94824 88.873 4.93701 cv88.3984 4.93652 88.1172 4.63721 88.1079 4.23779 cv88.0903 3.70557 88.0742 3.00049 88.0742 2.63232 cv88.0742 1.98975 87.646 0.276855 85.7188 0.276855 cv83.791 0.276855 83.417 1.93604 83.417 2.68506 cv83.417 3.05029 83.3228 3.97949 83.3096 4.45264 cv83.2959 4.95459 82.9897 4.98779 82.3452 4.98779 cv78.6177 4.98779 65.8813 4.98779 64.7852 4.98779 cv63.5005 4.98779 62.8047 6.05811 62.8047 7.34424 cv62.8047 8.62842 62.8047 19.8716 62.8047 21.3169 cv62.8047 22.7617 63.8218 24.1011 65.2676 24.1011 cvcpfalse sop/0 [/DeviceCMYK] /CSA add_res0.8471 0.898 0.7451 0.8275 cmykf0.5535 lw0 lc0 lj4 ml[] 0 dshtrue sadj65.2676 24.1011 mo66.7129 24.1011 67.7305 22.8701 67.7305 21.5845 cv67.7305 20.521 67.6816 10.8735 67.6816 10.3931 cv67.6816 9.91357 68.2153 9.54492 68.6953 9.54492 cv69.1758 9.54492 81.8101 9.64209 82.2925 9.64209 cv82.7734 9.64209 83.0957 10.0737 83.0957 10.5562 cv83.0957 10.9565 83.0957 16.8276 83.0957 18.8022 cv83.0957 19.2036 82.7842 19.604 82.2402 19.8765 cv78.6445 21.7007 64.8838 28.6821 63.7686 29.2397 cv62.4834 29.8833 62.4834 32.4531 63.126 33.3091 cv63.7686 34.1655 65.4814 34.1128 66.5522 33.6841 cv67.4707 33.3159 80.875 26.2437 84.6738 24.3745 cv85.3032 24.0679 85.9194 24.0161 86.3672 24.2437 cv89.7529 25.9575 104.236 33.3062 104.991 33.6841 cv106.384 34.3794 107.937 33.5234 108.365 32.8813 cv108.793 32.2388 109.114 30.2573 107.616 29.5083 cv106.669 29.0342 93.2476 22.2471 89.1782 20.1934 cv88.4482 19.8218 88.0264 18.9595 88.0264 18.9595 cv88.0264 18.9595 88.1172 10.8228 88.1172 10.4487 cv88.1172 10.0737 88.3413 9.59229 88.8232 9.59229 cv89.3057 9.59229 102.422 9.59229 102.851 9.59229 cv103.278 9.59229 104.025 9.69971 104.025 10.4487 cv104.025 11.1982 103.975 20.0449 103.975 21.1021 cv103.975 23.1372 105.367 23.8335 106.438 23.8335 cv107.509 23.8335 108.633 23.0835 108.633 21.2632 cv108.633 20.1934 108.633 7.98584 108.633 6.91455 cv108.633 5.84424 107.348 4.98779 106.277 4.98779 cv105.34 4.98779 92.1758 4.94824 88.873 4.93701 cv88.3984 4.93652 88.1172 4.63721 88.1079 4.23779 cv88.0903 3.70557 88.0742 3.00049 88.0742 2.63232 cv88.0742 1.98975 87.646 0.276855 85.7188 0.276855 cv83.791 0.276855 83.417 1.93604 83.417 2.68506 cv83.417 3.05029 83.3228 3.97949 83.3096 4.45264 cv83.2959 4.95459 82.9897 4.98779 82.3452 4.98779 cv78.6177 4.98779 65.8813 4.98779 64.7852 4.98779 cv63.5005 4.98779 62.8047 6.05811 62.8047 7.34424 cv62.8047 8.62842 62.8047 19.8716 62.8047 21.3169 cv62.8047 22.7617 63.8218 24.1011 65.2676 24.1011 cvcp@66.5522 36.9497 mo66.5522 37.2212 66.7129 37.5391 67.0342 37.5391 cv67.0342 37.5391 76.189 37.4858 76.7246 37.4858 cv77.2598 37.4858 78.0088 38.0742 78.0088 39.0386 cv78.0088 40.0015 77.2061 40.4292 76.3496 40.4292 cv75.4932 40.4292 67.9443 40.4292 67.5156 40.4292 cv67.0879 40.4292 66.7129 40.5903 66.7129 40.9116 cv66.7129 41.2329 66.6592 42.6787 66.6592 42.9995 cv66.6592 43.5884 67.3018 43.6421 67.623 43.6421 cv67.9443 43.6421 75.8677 43.6421 76.4033 43.6421 cv77.5811 43.6421 78.1699 44.231 78.1699 45.1421 cv78.1699 46.105 77.2598 46.6406 76.3496 46.6406 cv75.707 46.6406 67.7837 46.6406 67.4624 46.6406 cv67.1411 46.6406 66.6592 46.8013 66.6592 47.229 cv66.6592 47.6567 66.6592 48.8354 66.6592 49.2642 cv66.6592 49.6919 66.873 50.0132 67.7305 50.0132 cv68.5869 50.0132 75.7607 49.9595 76.6172 49.9595 cv77.4741 49.9595 78.0088 50.8169 78.0088 51.4585 cv78.0088 52.1011 77.2598 52.7437 76.6172 52.7437 cv75.9746 52.7437 65.2676 52.7437 64.5176 52.7437 cv63.7686 52.7437 63.3398 51.9946 63.3398 51.2441 cv63.3398 50.4956 63.3398 38.2886 63.3398 37.5391 cv63.3398 36.7896 63.8755 35.8257 65.0527 35.8257 cv65.8442 35.8257 66.5522 36.4722 66.5522 36.9497 cvcpf66.5522 36.9497 mo66.5522 37.2212 66.7129 37.5391 67.0342 37.5391 cv67.0342 37.5391 76.189 37.4858 76.7246 37.4858 cv77.2598 37.4858 78.0088 38.0742 78.0088 39.0386 cv78.0088 40.0015 77.2061 40.4292 76.3496 40.4292 cv75.4932 40.4292 67.9443 40.4292 67.5156 40.4292 cv67.0879 40.4292 66.7129 40.5903 66.7129 40.9116 cv66.7129 41.2329 66.6592 42.6787 66.6592 42.9995 cv66.6592 43.5884 67.3018 43.6421 67.623 43.6421 cv67.9443 43.6421 75.8677 43.6421 76.4033 43.6421 cv77.5811 43.6421 78.1699 44.231 78.1699 45.1421 cv78.1699 46.105 77.2598 46.6406 76.3496 46.6406 cv75.707 46.6406 67.7837 46.6406 67.4624 46.6406 cv67.1411 46.6406 66.6592 46.8013 66.6592 47.229 cv66.6592 47.6567 66.6592 48.8354 66.6592 49.2642 cv66.6592 49.6919 66.873 50.0132 67.7305 50.0132 cv68.5869 50.0132 75.7607 49.9595 76.6172 49.9595 cv77.4741 49.9595 78.0088 50.8169 78.0088 51.4585 cv78.0088 52.1011 77.2598 52.7437 76.6172 52.7437 cv75.9746 52.7437 65.2676 52.7437 64.5176 52.7437 cv63.7686 52.7437 63.3398 51.9946 63.3398 51.2441 cv63.3398 50.4956 63.3398 38.2886 63.3398 37.5391 cv63.3398 36.7896 63.8755 35.8257 65.0527 35.8257 cv65.8442 35.8257 66.5522 36.4722 66.5522 36.9497 cvcp@79.9365 37.0044 mo80.7041 36.3882 81.3818 36.6821 81.917 36.897 cv82.4521 37.1108 84.7617 38.4956 85.0762 38.7173 cv85.6113 39.0913 86.2539 39.0913 86.5747 38.8242 cv86.9863 38.481 89.5293 37.0166 89.8408 36.7896 cv90.4302 36.3613 91.4463 36.4692 91.7686 36.897 cv92.0898 37.3247 91.9824 38.2886 91.5005 38.6094 cv91.1792 38.8242 89.8408 39.6802 89.4126 39.894 cv88.9844 40.1089 88.9844 40.5903 89.4126 40.9116 cv89.8408 41.2329 91.229 42.0425 91.5547 42.2505 cv92.1426 42.6255 91.9824 43.5884 91.6611 43.9097 cv91.3394 44.231 90.9111 44.499 89.8936 44.0171 cv89.5898 43.873 86.6816 42.3574 86.3604 42.1431 cv86.0396 41.9292 85.5586 41.8755 85.2363 42.0894 cv84.915 42.3032 82.5596 43.749 82.1313 43.9639 cv81.7031 44.1777 80.6362 44.3413 80.2578 43.9639 cv79.7227 43.4272 80.0439 42.2505 80.4717 42.0361 cv80.8999 41.8223 82.0244 41.0894 82.2925 40.9116 cv82.6133 40.6978 82.6133 40.2158 82.2925 40.0015 cv81.8936 39.7378 80.5791 38.8774 80.1504 38.6636 cv79.7227 38.4487 79.4014 37.4321 79.9365 37.0044 cvcpf79.9365 37.0044 mo80.7041 36.3882 81.3818 36.6821 81.917 36.897 cv82.4521 37.1108 84.7617 38.4956 85.0762 38.7173 cv85.6113 39.0913 86.2539 39.0913 86.5747 38.8242 cv86.9863 38.481 89.5293 37.0166 89.8408 36.7896 cv90.4302 36.3613 91.4463 36.4692 91.7686 36.897 cv92.0898 37.3247 91.9824 38.2886 91.5005 38.6094 cv91.1792 38.8242 89.8408 39.6802 89.4126 39.894 cv88.9844 40.1089 88.9844 40.5903 89.4126 40.9116 cv89.8408 41.2329 91.229 42.0425 91.5547 42.2505 cv92.1426 42.6255 91.9824 43.5884 91.6611 43.9097 cv91.3394 44.231 90.9111 44.499 89.8936 44.0171 cv89.5898 43.873 86.6816 42.3574 86.3604 42.1431 cv86.0396 41.9292 85.5586 41.8755 85.2363 42.0894 cv84.915 42.3032 82.5596 43.749 82.1313 43.9639 cv81.7031 44.1777 80.6362 44.3413 80.2578 43.9639 cv79.7227 43.4272 80.0439 42.2505 80.4717 42.0361 cv80.8999 41.8223 82.0244 41.0894 82.2925 40.9116 cv82.6133 40.6978 82.6133 40.2158 82.2925 40.0015 cv81.8936 39.7378 80.5791 38.8774 80.1504 38.6636 cv79.7227 38.4487 79.4014 37.4321 79.9365 37.0044 cvcp@79.9365 45.5747 mo80.7041 44.9604 81.3818 45.2544 81.917 45.4678 cv82.4521 45.6821 84.7617 47.0669 85.0762 47.2876 cv85.6113 47.6646 86.2539 47.6646 86.5747 47.394 cv86.9863 47.0518 89.5293 45.5898 89.8408 45.3618 cv90.4302 44.9326 91.4463 45.0405 91.7686 45.4678 cv92.0898 45.895 91.9824 46.8613 91.5005 47.1802 cv91.1792 47.394 89.8408 48.2524 89.4126 48.4673 cv88.9844 48.6821 88.9844 49.1626 89.4126 49.4839 cv89.8408 49.8042 91.229 50.6147 91.5547 50.8218 cv92.1426 51.1978 91.9824 52.1611 91.6611 52.481 cv91.3394 52.8042 90.9111 53.0718 89.8936 52.5879 cv89.5898 52.4419 86.6816 50.9292 86.3604 50.7144 cv86.0396 50.5015 85.5586 50.4487 85.2363 50.6602 cv84.915 50.8745 82.5596 52.3198 82.1313 52.5337 cv81.7031 52.7485 80.6362 52.9126 80.2578 52.5337 cv79.7227 52.001 80.0439 50.8218 80.4717 50.6074 cv80.8999 50.394 82.0244 49.6616 82.2925 49.4839 cv82.6133 49.269 82.6133 48.7886 82.2925 48.5737 cv81.8936 48.3062 80.5791 47.4487 80.1504 47.2349 cv79.7227 47.0215 79.4014 46.001 79.9365 45.5747 cvcpf79.9365 45.5747 mo80.7041 44.9604 81.3818 45.2544 81.917 45.4678 cv82.4521 45.6821 84.7617 47.0669 85.0762 47.2876 cv85.6113 47.6646 86.2539 47.6646 86.5747 47.394 cv86.9863 47.0518 89.5293 45.5898 89.8408 45.3618 cv90.4302 44.9326 91.4463 45.0405 91.7686 45.4678 cv92.0898 45.895 91.9824 46.8613 91.5005 47.1802 cv91.1792 47.394 89.8408 48.2524 89.4126 48.4673 cv88.9844 48.6821 88.9844 49.1626 89.4126 49.4839 cv89.8408 49.8042 91.229 50.6147 91.5547 50.8218 cv92.1426 51.1978 91.9824 52.1611 91.6611 52.481 cv91.3394 52.8042 90.9111 53.0718 89.8936 52.5879 cv89.5898 52.4419 86.6816 50.9292 86.3604 50.7144 cv86.0396 50.5015 85.5586 50.4487 85.2363 50.6602 cv84.915 50.8745 82.5596 52.3198 82.1313 52.5337 cv81.7031 52.7485 80.6362 52.9126 80.2578 52.5337 cv79.7227 52.001 80.0439 50.8218 80.4717 50.6074 cv80.8999 50.394 82.0244 49.6616 82.2925 49.4839 cv82.6133 49.269 82.6133 48.7886 82.2925 48.5737 cv81.8936 48.3062 80.5791 47.4487 80.1504 47.2349 cv79.7227 47.0215 79.4014 46.001 79.9365 45.5747 cvcp@63.5005 76.6753 mo63.5005 76.6753 63.5537 57.4556 63.5537 56.7051 cv63.5537 55.7964 64.25 54.9927 65.4277 54.9927 cv66.3916 54.9927 105.634 54.939 106.599 54.939 cv107.669 54.939 108.524 55.5278 108.524 56.7051 cv108.524 57.562 108.524 75.6587 108.524 76.6216 cv108.524 77.5845 107.883 78.7632 106.813 78.7632 cv105.42 78.7632 104.885 77.5845 104.885 76.6216 cv104.885 75.6587 104.938 59.6499 104.938 59.2222 cv104.938 58.7939 104.616 58.3643 103.975 58.3643 cv103.332 58.3643 68.4795 58.3643 67.9443 58.3643 cv67.4087 58.3643 66.9805 58.6865 66.9805 59.2222 cv66.9805 59.7563 67.0342 76.1938 67.0342 76.729 cv67.0342 77.9058 65.9634 78.5493 65.2139 78.5493 cv64.4644 78.5493 63.5005 77.7456 63.5005 76.6753 cvcpf63.5005 76.6753 mo63.5005 76.6753 63.5537 57.4556 63.5537 56.7051 cv63.5537 55.7964 64.25 54.9927 65.4277 54.9927 cv66.3916 54.9927 105.634 54.939 106.599 54.939 cv107.669 54.939 108.524 55.5278 108.524 56.7051 cv108.524 57.562 108.524 75.6587 108.524 76.6216 cv108.524 77.5845 107.883 78.7632 106.813 78.7632 cv105.42 78.7632 104.885 77.5845 104.885 76.6216 cv104.885 75.6587 104.938 59.6499 104.938 59.2222 cv104.938 58.7939 104.616 58.3643 103.975 58.3643 cv103.332 58.3643 68.4795 58.3643 67.9443 58.3643 cv67.4087 58.3643 66.9805 58.6865 66.9805 59.2222 cv66.9805 59.7563 67.0342 76.1938 67.0342 76.729 cv67.0342 77.9058 65.9634 78.5493 65.2139 78.5493 cv64.4644 78.5493 63.5005 77.7456 63.5005 76.6753 cvcp@79.5088 67.8413 mo79.5088 68.3765 79.9365 68.644 80.4717 68.644 cv81.0068 68.644 91.8213 68.5903 92.2495 68.5903 cv92.6777 68.5903 93.2139 68.27 93.2139 67.8413 cv93.2139 67.4126 93.2139 65.1646 93.2139 64.7358 cv93.2139 64.0405 92.4106 63.8794 91.9824 63.8794 cv91.5547 63.8794 80.8467 63.8794 80.3115 63.8794 cv79.7754 63.8794 79.5088 64.3071 79.5088 64.8423 cv79.5088 64.8423 79.5088 67.4126 79.5088 67.8413 cvcp70.1924 62.1655 mo70.1924 61.0952 70.8887 60.3462 71.7988 60.3462 cv72.709 60.3462 73.4053 61.2026 73.4053 62.0586 cv73.4053 62.9155 73.4053 73.5693 73.4053 74.105 cv73.4053 74.6406 73.7266 75.0151 74.2617 75.0151 cv74.583 75.0151 82.2925 75.0151 82.8276 75.0151 cv83.3628 75.0151 83.791 74.5864 83.791 74.1587 cv83.791 73.731 83.791 72.9814 83.791 72.5522 cv83.791 72.1245 83.2559 71.6958 82.8276 71.6958 cv82.3994 71.6958 78.0088 71.6958 77.3672 71.6958 cv76.7246 71.6958 76.189 71.3745 76.189 70.5181 cv76.189 69.6616 76.189 62.3813 76.189 61.7378 cv76.189 61.0952 76.7778 60.4531 77.5811 60.4531 cv78.1162 60.4531 94.5522 60.4531 95.0874 60.4531 cv95.7295 60.4531 96.3193 61.1499 96.3193 61.8452 cv96.3193 62.3813 96.3193 70.0894 96.3193 70.6255 cv96.3193 71.1606 95.623 71.5884 95.1943 71.5884 cv94.7666 71.5884 89.1987 71.5884 88.7695 71.5884 cv88.3413 71.5884 87.8604 72.0171 87.8604 72.4448 cv87.8604 72.8735 87.8604 73.9448 87.8604 74.3726 cv87.8604 74.8013 88.1812 75.0151 88.6094 75.0151 cv89.0376 75.0151 97.6035 75.0151 98.1396 75.0151 cv98.6748 75.0151 98.9961 74.4795 98.9961 74.1587 cv98.9961 73.8374 98.9961 62.2729 98.9961 61.6304 cv98.9961 60.9883 99.6377 59.9712 100.763 59.9712 cv101.673 59.9712 102.422 60.9341 102.422 61.5771 cv102.422 62.1128 102.422 76.3003 102.422 76.9429 cv102.422 77.5845 101.78 78.228 101.138 78.228 cv100.494 78.228 89.0918 78.228 88.6621 78.228 cv88.2344 78.228 87.8604 78.3882 87.8604 78.7632 cv87.8604 79.2983 87.8604 83.0454 87.8604 83.9028 cv87.8604 84.7593 87.1099 85.5083 86.3604 85.5083 cv85.6113 85.5083 70.1924 85.4556 69.229 85.4556 cv68.2656 85.4556 67.0879 84.8662 67.0879 83.4741 cv67.0879 82.5649 67.9443 81.3335 69.1221 81.3335 cv70.2998 81.3335 82.6133 81.3335 83.0415 81.3335 cv83.4697 81.3335 83.791 81.1187 83.791 80.6899 cv83.791 80.2617 83.791 79.1914 83.791 78.8706 cv83.791 78.5493 83.4697 78.3354 82.9346 78.3354 cv82.3994 78.3354 72.3345 78.3354 71.6919 78.3354 cv71.0498 78.3354 70.1924 77.7993 70.1924 76.9429 cv70.1924 76.0859 70.1924 62.1655 70.1924 62.1655 cvcpf79.5088 67.8413 mo79.5088 68.3765 79.9365 68.644 80.4717 68.644 cv81.0068 68.644 91.8213 68.5903 92.2495 68.5903 cv92.6777 68.5903 93.2139 68.27 93.2139 67.8413 cv93.2139 67.4126 93.2139 65.1646 93.2139 64.7358 cv93.2139 64.0405 92.4106 63.8794 91.9824 63.8794 cv91.5547 63.8794 80.8467 63.8794 80.3115 63.8794 cv79.7754 63.8794 79.5088 64.3071 79.5088 64.8423 cv79.5088 64.8423 79.5088 67.4126 79.5088 67.8413 cvcp70.1924 62.1655 mo70.1924 61.0952 70.8887 60.3462 71.7988 60.3462 cv72.709 60.3462 73.4053 61.2026 73.4053 62.0586 cv73.4053 62.9155 73.4053 73.5693 73.4053 74.105 cv73.4053 74.6406 73.7266 75.0151 74.2617 75.0151 cv74.583 75.0151 82.2925 75.0151 82.8276 75.0151 cv83.3628 75.0151 83.791 74.5864 83.791 74.1587 cv83.791 73.731 83.791 72.9814 83.791 72.5522 cv83.791 72.1245 83.2559 71.6958 82.8276 71.6958 cv82.3994 71.6958 78.0088 71.6958 77.3672 71.6958 cv76.7246 71.6958 76.189 71.3745 76.189 70.5181 cv76.189 69.6616 76.189 62.3813 76.189 61.7378 cv76.189 61.0952 76.7778 60.4531 77.5811 60.4531 cv78.1162 60.4531 94.5522 60.4531 95.0874 60.4531 cv95.7295 60.4531 96.3193 61.1499 96.3193 61.8452 cv96.3193 62.3813 96.3193 70.0894 96.3193 70.6255 cv96.3193 71.1606 95.623 71.5884 95.1943 71.5884 cv94.7666 71.5884 89.1987 71.5884 88.7695 71.5884 cv88.3413 71.5884 87.8604 72.0171 87.8604 72.4448 cv87.8604 72.8735 87.8604 73.9448 87.8604 74.3726 cv87.8604 74.8013 88.1812 75.0151 88.6094 75.0151 cv89.0376 75.0151 97.6035 75.0151 98.1396 75.0151 cv98.6748 75.0151 98.9961 74.4795 98.9961 74.1587 cv98.9961 73.8374 98.9961 62.2729 98.9961 61.6304 cv98.9961 60.9883 99.6377 59.9712 100.763 59.9712 cv101.673 59.9712 102.422 60.9341 102.422 61.5771 cv102.422 62.1128 102.422 76.3003 102.422 76.9429 cv102.422 77.5845 101.78 78.228 101.138 78.228 cv100.494 78.228 89.0918 78.228 88.6621 78.228 cv88.2344 78.228 87.8604 78.3882 87.8604 78.7632 cv87.8604 79.2983 87.8604 83.0454 87.8604 83.9028 cv87.8604 84.7593 87.1099 85.5083 86.3604 85.5083 cv85.6113 85.5083 70.1924 85.4556 69.229 85.4556 cv68.2656 85.4556 67.0879 84.8662 67.0879 83.4741 cv67.0879 82.5649 67.9443 81.3335 69.1221 81.3335 cv70.2998 81.3335 82.6133 81.3335 83.0415 81.3335 cv83.4697 81.3335 83.791 81.1187 83.791 80.6899 cv83.791 80.2617 83.791 79.1914 83.791 78.8706 cv83.791 78.5493 83.4697 78.3354 82.9346 78.3354 cv82.3994 78.3354 72.3345 78.3354 71.6919 78.3354 cv71.0498 78.3354 70.1924 77.7993 70.1924 76.9429 cv70.1924 76.0859 70.1924 62.1655 70.1924 62.1655 cvcp@105.153 36.9429 mo105.153 37.2144 104.991 37.5322 104.671 37.5322 cv104.671 37.5322 95.5156 37.478 94.9805 37.478 cv94.4453 37.478 93.6953 38.0679 93.6953 39.0308 cv93.6953 39.9956 94.498 40.4233 95.3545 40.4233 cv96.2119 40.4233 103.761 40.4233 104.188 40.4233 cv104.616 40.4233 104.991 40.5845 104.991 40.9058 cv104.991 41.2266 105.046 42.6719 105.046 42.9927 cv105.046 43.5825 104.402 43.6343 104.081 43.6343 cv103.761 43.6343 95.8369 43.6343 95.3018 43.6343 cv94.124 43.6343 93.5352 44.2241 93.5352 45.1343 cv93.5352 46.0981 94.4453 46.6333 95.3545 46.6333 cv95.998 46.6333 103.921 46.6333 104.242 46.6333 cv104.563 46.6333 105.046 46.7939 105.046 47.2222 cv105.046 47.6509 105.046 48.8286 105.046 49.2573 cv105.046 49.6851 104.832 50.0063 103.975 50.0063 cv103.118 50.0063 95.9443 49.9531 95.0874 49.9531 cv94.2314 49.9531 93.6953 50.8091 93.6953 51.4521 cv93.6953 52.0938 94.4453 52.7378 95.0874 52.7378 cv95.7295 52.7378 106.438 52.7378 107.187 52.7378 cv107.937 52.7378 108.365 51.9878 108.365 51.2378 cv108.365 50.4883 108.365 38.2817 108.365 37.5322 cv108.365 36.7837 107.83 35.8188 106.651 35.8188 cv105.862 35.8188 105.153 36.4653 105.153 36.9429 cvcpf105.153 36.9429 mo105.153 37.2144 104.991 37.5322 104.671 37.5322 cv104.671 37.5322 95.5156 37.478 94.9805 37.478 cv94.4453 37.478 93.6953 38.0679 93.6953 39.0308 cv93.6953 39.9956 94.498 40.4233 95.3545 40.4233 cv96.2119 40.4233 103.761 40.4233 104.188 40.4233 cv104.616 40.4233 104.991 40.5845 104.991 40.9058 cv104.991 41.2266 105.046 42.6719 105.046 42.9927 cv105.046 43.5825 104.402 43.6343 104.081 43.6343 cv103.761 43.6343 95.8369 43.6343 95.3018 43.6343 cv94.124 43.6343 93.5352 44.2241 93.5352 45.1343 cv93.5352 46.0981 94.4453 46.6333 95.3545 46.6333 cv95.998 46.6333 103.921 46.6333 104.242 46.6333 cv104.563 46.6333 105.046 46.7939 105.046 47.2222 cv105.046 47.6509 105.046 48.8286 105.046 49.2573 cv105.046 49.6851 104.832 50.0063 103.975 50.0063 cv103.118 50.0063 95.9443 49.9531 95.0874 49.9531 cv94.2314 49.9531 93.6953 50.8091 93.6953 51.4521 cv93.6953 52.0938 94.4453 52.7378 95.0874 52.7378 cv95.7295 52.7378 106.438 52.7378 107.187 52.7378 cv107.937 52.7378 108.365 51.9878 108.365 51.2378 cv108.365 50.4883 108.365 38.2817 108.365 37.5322 cv108.365 36.7837 107.83 35.8188 106.651 35.8188 cv105.862 35.8188 105.153 36.4653 105.153 36.9429 cvcp@1.1071 lw85.6738 93.3613 mo86.6406 93.3613 88.501 93.2817 89.019 93.0581 cv89.5381 92.833 90.3076 92.8765 90.6787 93.3257 cv91.0508 93.7734 90.8799 95.7476 90.7324 96.27 cv90.5859 96.7925 90.0635 97.6753 90.0635 98.3452 cv90.0635 99.0142 90.6929 100.312 90.8398 100.981 cv90.9868 101.651 91.459 103.524 90.6787 104.14 cv90.1406 104.564 88.4233 103.849 87.6074 103.849 cv86.791 103.849 85.6738 103.403 85.0049 103.551 cv84.3359 103.699 83.2114 103.95 82.542 104.247 cv81.873 104.545 80.6113 104.555 80.2393 104.032 cv79.8687 103.51 79.9453 101.095 80.1689 100.576 cv80.394 100.057 81.3604 98.5654 81.3604 97.7485 cv81.3604 96.6978 81.1226 95.2397 81.0425 94.6099 cv80.9668 94.0181 81.2632 93.0679 82.0059 92.8438 cv82.7485 92.6187 84.4824 93.3613 85.6738 93.3613 cvcp@90.8926 93.2183 mo90.8926 93.2183 94.855 91.4517 96.6221 90.5952 cv98.3877 89.7378 101.013 88.4531 101.333 88.2397 cv101.654 88.0249 102.833 87.9712 103.368 88.3467 cv103.903 88.7202 105.188 90.3813 104.813 91.2378 cv104.438 92.0933 103.796 92.3618 102.618 92.6284 cv101.44 92.897 98.4424 93.272 96.8359 93.3257 cv95.2305 93.3794 91.1079 93.646 91.1079 93.646 cv90.8926 93.2183 licp@90.7856 100.767 mo90.7856 100.767 99.2988 100.66 100.156 100.606 cv101.013 100.552 101.815 99.9097 102.137 99.2681 cv102.458 98.6255 103.047 97.6079 103.688 95.9487 cv104.331 94.2891 104.813 91.2378 104.813 91.2378 cv@1 lc1 lj100.744 100.606 mo100.744 100.606 103.1 101.731 104.171 101.891 cv105.241 102.052 105.932 102.132 106.633 102.106 cv108.079 102.052 111.827 101.463 111.827 101.463 cv111.827 101.463 105.884 104.3 105.027 104.729 cv104.171 105.157 103.903 105.746 103.903 106.122 cv103.903 106.496 106.419 108.583 107.276 109.012 cv108.133 109.44 112.255 111.582 112.255 111.582 cv112.255 111.582 107.65 111.849 104.6 111.368 cv101.548 110.886 99.5127 109.065 97.8525 107.941 cv96.1934 106.817 91.1079 103.605 91.1079 103.605 cv@105.15 91.0767 mo110.719 87.7939 114.146 84.6558 119.285 79.3716 cv124.425 74.0884 127.637 69.2358 129.065 65.4521 cv130.494 61.6675 131.207 58.4556 131.207 58.4556 cv134.135 61.3091 li137.274 60.3833 li137.274 60.3833 137.348 63.0269 135.849 66.5229 cv134.349 70.0181 129.919 77.2974 123.567 83.5815 cv117.217 89.8657 112.934 93.8604 104.796 97.9302 cv103.18 98.7358 102.511 98.5718 102.511 98.5718 cv@0 lj104.438 94.2192 mo108.865 92.2212 113.878 88.7046 119.429 83.6558 cv124.927 78.6563 127.637 75.3022 130.351 71.02 cv133.064 66.7368 133.706 64.9497 134.064 61.6675 cv@1 lj131.28 58.7397 mo130.853 57.0259 128.921 56.3838 127.353 56.1694 cv125.783 55.9556 122.855 57.6694 121.216 58.7397 cv119.576 59.8101 115.862 64.5952 113.721 68.52 cv111.579 72.4448 110.22 77.3706 110.22 77.3706 cv110.22 77.3706 114.437 72.8081 118.646 68.8784 cv122.855 64.9497 126.067 62.9497 127.497 62.5952 cv128.925 62.2383 129.853 63.0234 129.853 63.0234 cv@130.494 60.7388 mo129.424 59.3818 127.653 59.2402 126.784 59.2402 cv125.211 59.2402 122.431 61.0986 119.931 63.5249 cv117.431 65.9507 111.649 74.9448 111.649 74.9448 cv@116.716 90.293 mo120.212 89.5078 122.642 88.5063 127.423 85.8662 cv132.205 83.2261 136.701 80.7974 140.984 76.0161 cv145.269 71.2339 146.98 68.5171 149.979 63.6655 cv152.977 58.812 158.616 51.103 161.972 49.2471 cv165.327 47.3901 171.323 49.0317 171.323 49.0317 cv171.323 49.0317 168.114 49.0317 166.328 49.8174 cv164.541 50.6021 161.403 52.8872 158.619 56.9556 cv155.835 61.0249 148.768 72.5923 145.983 76.8022 cv143.2 81.0117 139.418 86.7266 132.278 90.936 cv125.138 95.146 115.005 99.5024 108.508 101.859 cv@104.509 98.3574 mo106.078 98.5718 108.933 98.2173 114.858 96.145 cv120.784 94.0747 127.206 90.7183 130.277 88.7202 cv133.349 86.7241 139.844 81.8687 145.84 73.1616 cv151.759 64.5693 160.542 49.1021 165.397 48.5327 cv@121.497 85.7954 mo125.425 83.8696 129.28 80.0811 131.277 77.5845 cv133.275 75.0884 138.061 67.4458 140.272 63.4517 cv142.483 59.4546 146.128 55.0991 148.981 53.6724 cv151.836 52.2456 157.333 50.5317 157.333 50.5317 cv157.333 50.5317 153.051 52.7437 148.981 57.312 cv144.912 61.8813 143.915 65.0981 141.914 68.8784 cv139.913 72.6597 137.986 77.0132 133.205 82.5103 cv@124.923 87.1519 mo128.991 83.5815 131.066 81.2051 133.062 78.73 cv135.133 76.1597 137.345 72.5923 139.629 68.2363 cv141.914 63.8794 146.339 57.8833 147.981 56.1694 cv149.624 54.4575 151.906 52.8853 155.332 51.2441 cv@138.418 78.5132 mo141.132 75.1587 143.771 70.0894 144.558 68.0933 cv145.636 65.3589 146.913 62.665 147.557 58.8823 cv@149.911 56.5981 mo149.911 56.5981 149.199 60.3101 148.697 62.0249 cv148.202 63.7153 147.269 66.7334 145.913 69.7314 cv@116.364 43.3208 mo115.356 42.4028 113.111 41.7134 111.723 43.9639 cv110.338 46.2139 111.646 49.48 112.438 50.104 cv113.263 50.7544 115.544 49.2456 116.15 47.8188 cv117.05 45.7002 117.412 44.2749 116.364 43.3208 cvcp0 0 0 0 cmykf116.364 43.3208 mo115.356 42.4028 113.111 41.7134 111.723 43.9639 cv110.338 46.2139 111.646 49.48 112.438 50.104 cv113.263 50.7544 115.544 49.2456 116.15 47.8188 cv117.05 45.7002 117.412 44.2749 116.364 43.3208 cvcp0.8471 0.898 0.7451 0.8275 cmyk@113.007 48.8887 mo113.007 48.8887 114.51 46.105 115.507 43.749 cv0 0 0 0 cmykf113.007 48.8887 mo113.007 48.8887 114.51 46.105 115.507 43.749 cv0.8471 0.898 0.7451 0.8275 cmyk@122.075 41.0371 mo121.068 40.1182 118.894 39.7852 117.505 42.0361 cv116.12 44.2861 117.425 48.1245 118.217 48.7485 cv119.041 49.3989 121.323 47.8906 121.929 46.4634 cv122.828 44.3442 123.123 41.9907 122.075 41.0371 cvcp0 0 0 0 cmykf122.075 41.0371 mo121.068 40.1182 118.894 39.7852 117.505 42.0361 cv116.12 44.2861 117.425 48.1245 118.217 48.7485 cv119.041 49.3989 121.323 47.8906 121.929 46.4634 cv122.828 44.3442 123.123 41.9907 122.075 41.0371 cvcp0.8471 0.898 0.7451 0.8275 cmyk@118.787 47.5337 mo118.787 47.5337 118.649 44.0347 120.362 40.7505 cv0 0 0 0 cmykf118.787 47.5337 mo118.787 47.5337 118.649 44.0347 120.362 40.7505 cv0.8471 0.898 0.7451 0.8275 cmyk@123.072 37.9673 mo122.812 36.6313 120.031 35.8423 117.578 36.8262 cv114.149 38.2026 112.56 40.7314 112.937 42.1074 cv113.212 43.1206 116.527 43.3228 117.862 42.5366 cv119.848 41.3701 123.347 39.3594 123.072 37.9673 cvcp0 0 0 0 cmykf123.072 37.9673 mo122.812 36.6313 120.031 35.8423 117.578 36.8262 cv114.149 38.2026 112.56 40.7314 112.937 42.1074 cv113.212 43.1206 116.527 43.3228 117.862 42.5366 cv119.848 41.3701 123.347 39.3594 123.072 37.9673 cvcp0.8471 0.898 0.7451 0.8275 cmyk@113.724 41.6802 mo113.724 41.6802 116.862 39.1094 120.576 37.5391 cv0 0 0 0 cmykf113.724 41.6802 mo113.724 41.6802 116.862 39.1094 120.576 37.5391 cv0.8471 0.898 0.7451 0.8275 cmyk@129.712 34.6138 mo129.025 33.438 126.565 34.1616 124.572 35.8979 cv121.788 38.3237 121.835 41.7896 122.645 42.9644 cv123.237 43.8311 125.612 43.8188 127.071 41.7524 cv128.43 39.8242 130.428 35.8369 129.712 34.6138 cvcp0 0 0 0 cmykf129.712 34.6138 mo129.025 33.438 126.565 34.1616 124.572 35.8979 cv121.788 38.3237 121.835 41.7896 122.645 42.9644 cv123.237 43.8311 125.612 43.8188 127.071 41.7524 cv128.43 39.8242 130.428 35.8369 129.712 34.6138 cvcp0.8471 0.898 0.7451 0.8275 cmyk@123.859 42.394 mo123.859 42.394 125.579 38.8892 128.57 36.1841 cv0 0 0 0 cmykf123.859 42.394 mo123.859 42.394 125.579 38.8892 128.57 36.1841 cv0.8471 0.898 0.7451 0.8275 cmyk@127.497 36.1357 mo128.019 34.8794 125.804 33.5103 123.216 32.9712 cv119.6 32.2212 116.561 34.1274 116.571 35.5552 cv116.578 36.6123 118.048 38.1255 120.576 38.0391 cv122.932 37.9551 126.954 37.4448 127.497 36.1357 cvcp0 0 0 0 cmykf127.497 36.1357 mo128.019 34.8794 125.804 33.5103 123.216 32.9712 cv119.6 32.2212 116.561 34.1274 116.571 35.5552 cv116.578 36.6123 118.048 38.1255 120.576 38.0391 cv122.932 37.9551 126.954 37.4448 127.497 36.1357 cvcp0.8471 0.898 0.7451 0.8275 cmyk@118.222 35.5405 mo118.222 35.5405 121.574 36.1841 125.572 35.3267 cv0 0 0 0 cmykf118.222 35.5405 mo118.222 35.5405 121.574 36.1841 125.572 35.3267 cv0.8471 0.898 0.7451 0.8275 cmyk@123.729 31.585 mo124.188 30.4834 122.243 29.2822 119.971 28.811 cv116.799 28.1514 114.283 29.7212 114.293 30.9722 cv114.299 31.9009 115.858 33.1909 118.077 33.1138 cv120.145 33.041 123.253 32.7354 123.729 31.585 cvcp0 0 0 0 cmykf123.729 31.585 mo124.188 30.4834 122.243 29.2822 119.971 28.811 cv116.799 28.1514 114.283 29.7212 114.293 30.9722 cv114.299 31.9009 115.858 33.1909 118.077 33.1138 cv120.145 33.041 123.253 32.7354 123.729 31.585 cvcp0.8471 0.898 0.7451 0.8275 cmyk@115.722 31.2583 mo115.722 31.2583 118.79 29.8291 122.146 31.543 cv0 0 0 0 cmykf115.722 31.2583 mo115.722 31.2583 118.79 29.8291 122.146 31.543 cv0.8471 0.898 0.7451 0.8275 cmyk@131.997 36.897 mo134.208 35.0415 131.927 32.8999 129.069 31.1147 cv126.322 29.3979 123.16 29.9097 122.474 30.9565 cv121.574 32.3291 122.558 34.9634 124.572 35.8979 cv126.449 36.7681 131.044 37.6968 131.997 36.897 cvcp0 0 0 0 cmykf131.997 36.897 mo134.208 35.0415 131.927 32.8999 129.069 31.1147 cv126.322 29.3979 123.16 29.9097 122.474 30.9565 cv121.574 32.3291 122.558 34.9634 124.572 35.8979 cv126.449 36.7681 131.044 37.6968 131.997 36.897 cvcp0.8471 0.898 0.7451 0.8275 cmyk@123.622 31.8589 mo123.622 31.8589 128.35 33.353 130.568 36.3979 cv0 0 0 0 cmykf123.622 31.8589 mo123.622 31.8589 128.35 33.353 130.568 36.3979 cv0.8471 0.898 0.7451 0.8275 cmyk@135.273 37.9507 mo134.042 35.3384 130.571 36.4692 128.714 38.9683 cv126.78 41.5693 126.302 44.9614 127.142 45.8906 cv128.239 47.1099 130.167 45.6235 131.854 44.1777 cv134.353 42.0361 135.805 39.0747 135.273 37.9507 cvcp0 0 0 0 cmykf135.273 37.9507 mo134.042 35.3384 130.571 36.4692 128.714 38.9683 cv126.78 41.5693 126.302 44.9614 127.142 45.8906 cv128.239 47.1099 130.167 45.6235 131.854 44.1777 cv134.353 42.0361 135.805 39.0747 135.273 37.9507 cvcp0.8471 0.898 0.7451 0.8275 cmyk@128.272 44.769 mo128.272 44.769 131.14 40.5366 134.138 38.4673 cv0 0 0 0 cmykf128.272 44.769 mo128.272 44.769 131.14 40.5366 134.138 38.4673 cv0.8471 0.898 0.7451 0.8275 cmyk@138.491 37.897 mo139.707 37.4683 141.751 35.6001 139.348 33.6143 cv136.855 31.5459 133.78 30.7583 133.138 31.186 cv131.772 32.0967 131.786 34.4238 133.138 36.1841 cv135.146 38.7915 137.317 38.3091 138.491 37.897 cvcp0 0 0 0 cmykf138.491 37.897 mo139.707 37.4683 141.751 35.6001 139.348 33.6143 cv136.855 31.5459 133.78 30.7583 133.138 31.186 cv131.772 32.0967 131.786 34.4238 133.138 36.1841 cv135.146 38.7915 137.317 38.3091 138.491 37.897 cvcp0.8471 0.898 0.7451 0.8275 cmyk@133.917 32.5825 mo133.917 32.5825 136.139 34.543 138.85 36.6123 cv0 0 0 0 cmykf133.917 32.5825 mo133.917 32.5825 136.139 34.543 138.85 36.6123 cv0.8471 0.898 0.7451 0.8275 cmyk@136.497 40.6089 mo138.455 38.4858 136.149 37.8867 134.282 36.5396 cv131.214 34.3267 128.541 34.8867 128.071 35.6113 cv127.289 36.8242 128.969 38.7495 130.929 40.1812 cv133.569 42.1074 135.65 41.5239 136.497 40.6089 cvcp0 0 0 0 cmykf136.497 40.6089 mo138.455 38.4858 136.149 37.8867 134.282 36.5396 cv131.214 34.3267 128.541 34.8867 128.071 35.6113 cv127.289 36.8242 128.969 38.7495 130.929 40.1812 cv133.569 42.1074 135.65 41.5239 136.497 40.6089 cvcp0.8471 0.898 0.7451 0.8275 cmyk@128.57 36.1841 mo128.57 36.1841 133.426 37.6113 136.065 40.4663 cv0 0 0 0 cmykf128.57 36.1841 mo128.57 36.1841 133.426 37.6113 136.065 40.4663 cv0.8471 0.898 0.7451 0.8275 cmyk@138.712 49.7427 mo136.508 47.8755 135.929 50.3931 134.567 52.2456 cv131.783 56.0283 133.329 57.9321 134.072 58.3691 cv135.316 59.1001 137.22 57.5474 138.565 55.5278 cv140.383 52.8101 139.659 50.5503 138.712 49.7427 cvcp0 0 0 0 cmykf138.712 49.7427 mo136.508 47.8755 135.929 50.3931 134.567 52.2456 cv131.783 56.0283 133.329 57.9321 134.072 58.3691 cv135.316 59.1001 137.22 57.5474 138.565 55.5278 cv140.383 52.8101 139.659 50.5503 138.712 49.7427 cvcp0.8471 0.898 0.7451 0.8275 cmyk@134.497 56.7417 mo134.497 56.7417 136.06 52.9263 136.778 49.603 cv0 0 0 0 cmykf134.497 56.7417 mo134.497 56.7417 136.06 52.9263 136.778 49.603 cv0.8471 0.898 0.7451 0.8275 cmyk@139.411 49.707 mo139.968 46.8716 137.917 47.3208 135.638 47.0327 cv130.977 46.4443 129.635 48.9922 129.614 49.854 cv129.581 51.2983 131.79 51.9087 134.208 52.1011 cv137.468 52.3643 139.167 50.9263 139.411 49.707 cvcp0 0 0 0 cmykf139.411 49.707 mo139.968 46.8716 137.917 47.3208 135.638 47.0327 cv130.977 46.4443 129.635 48.9922 129.614 49.854 cv129.581 51.2983 131.79 51.9087 134.208 52.1011 cv137.468 52.3643 139.167 50.9263 139.411 49.707 cvcp0.8471 0.898 0.7451 0.8275 cmyk@131.14 49.8174 mo131.14 49.8174 136.065 48.7471 138.706 48.8887 cv0 0 0 0 cmykf131.14 49.8174 mo131.14 49.8174 136.065 48.7471 138.706 48.8887 cv0.8471 0.898 0.7451 0.8275 cmyk@143.126 46.2085 mo143.681 43.3726 141.63 43.8237 139.353 43.5347 cv134.69 42.9468 133.349 45.4937 133.329 46.355 cv133.296 47.7998 135.503 48.4106 137.923 48.603 cv141.183 48.8657 142.882 47.4282 143.126 46.2085 cvcp0 0 0 0 cmykf143.126 46.2085 mo143.681 43.3726 141.63 43.8237 139.353 43.5347 cv134.69 42.9468 133.349 45.4937 133.329 46.355 cv133.296 47.7998 135.503 48.4106 137.923 48.603 cv141.183 48.8657 142.882 47.4282 143.126 46.2085 cvcp0.8471 0.898 0.7451 0.8275 cmyk@134.854 46.3188 mo134.854 46.3188 139.78 45.2485 142.421 45.3911 cv0 0 0 0 cmykf134.854 46.3188 mo134.854 46.3188 139.78 45.2485 142.421 45.3911 cv0.8471 0.898 0.7451 0.8275 cmyk@144.103 41.645 mo146.525 40.0688 144.771 38.9106 143.394 37.0737 cv140.569 33.3188 137.806 34.1313 137.174 34.7163 cv136.113 35.6987 137.214 37.707 138.76 39.5796 cv140.841 42.1001 143.056 42.3188 144.103 41.645 cvcp0 0 0 0 cmykf144.103 41.645 mo146.525 40.0688 144.771 38.9106 143.394 37.0737 cv140.569 33.3188 137.806 34.1313 137.174 34.7163 cv136.113 35.6987 137.214 37.707 138.76 39.5796 cv140.841 42.1001 143.056 42.3188 144.103 41.645 cvcp0.8471 0.898 0.7451 0.8275 cmyk@138.351 36.1841 mo138.351 36.1841 141.825 39.3994 143.562 41.394 cv0 0 0 0 cmykf138.351 36.1841 mo138.351 36.1841 141.825 39.3994 143.562 41.394 cv0.8471 0.898 0.7451 0.8275 cmyk@145.204 45.5347 mo146.864 43.1675 145.874 41.4956 143.698 40.7617 cv141.135 39.894 137.36 39.8296 136.993 40.6089 cv136.377 41.9175 138.003 44.4507 140.135 45.606 cv143.009 47.165 144.484 46.5522 145.204 45.5347 cvcp0 0 0 0 cmykf145.204 45.5347 mo146.864 43.1675 145.874 41.4956 143.698 40.7617 cv141.135 39.894 137.36 39.8296 136.993 40.6089 cv136.377 41.9175 138.003 44.4507 140.135 45.606 cv143.009 47.165 144.484 46.5522 145.204 45.5347 cvcp0.8471 0.898 0.7451 0.8275 cmyk@138.85 41.7524 mo138.85 41.7524 140.278 41.6802 145.468 44.7036 cv0 0 0 0 cmykf138.85 41.7524 mo138.85 41.7524 140.278 41.6802 145.468 44.7036 cv0.8471 0.898 0.7451 0.8275 cmyk@148.985 43.6782 mo149.911 43.4644 150.946 41.083 149.771 39.1094 cv147.988 36.1118 145.301 35.5337 144.847 35.6841 cv144.417 35.8257 143.356 41.1655 145.488 42.3218 cv148.362 43.8813 147.771 43.9595 148.985 43.6782 cvcp0 0 0 0 cmykf148.985 43.6782 mo149.911 43.4644 150.946 41.083 149.771 39.1094 cv147.988 36.1118 145.301 35.5337 144.847 35.6841 cv144.417 35.8257 143.356 41.1655 145.488 42.3218 cv148.362 43.8813 147.771 43.9595 148.985 43.6782 cvcp0.8471 0.898 0.7451 0.8275 cmyk@145.418 36.4692 mo145.418 36.4692 147.058 38.5396 147.915 41.6089 cv0 0 0 0 cmykf145.418 36.4692 mo145.418 36.4692 147.058 38.5396 147.915 41.6089 cv0.8471 0.898 0.7451 0.8275 cmyk@149.129 47.4614 mo150.079 47.4722 151.899 45.9673 151.341 44.2495 cv150.414 41.394 147.71 40.1851 147.234 40.2222 cv146.784 40.2593 144.481 45.1938 146.278 46.8247 cv148.697 49.0229 147.881 47.4448 149.129 47.4614 cvcp0 0 0 0 cmykf149.129 47.4614 mo150.079 47.4722 151.899 45.9673 151.341 44.2495 cv150.414 41.394 147.71 40.1851 147.234 40.2222 cv146.784 40.2593 144.481 45.1938 146.278 46.8247 cv148.697 49.0229 147.881 47.4448 149.129 47.4614 cvcp0.8471 0.898 0.7451 0.8275 cmyk@147.747 40.8364 mo147.747 40.8364 148.848 43.2383 148.948 46.4214 cv0 0 0 0 cmykf147.747 40.8364 mo147.747 40.8364 148.848 43.2383 148.948 46.4214 cv0.8471 0.898 0.7451 0.8275 cmyk@145.987 47.604 mo144.498 45.123 142.356 46.0234 140.309 47.0581 cv136.116 49.187 136.243 51.7349 136.708 52.4595 cv137.491 53.6753 140.095 53.5815 142.206 52.3867 cv145.053 50.7759 147.058 49.3892 145.987 47.604 cvcp0 0 0 0 cmykf145.987 47.604 mo144.498 45.123 142.356 46.0234 140.309 47.0581 cv136.116 49.187 136.243 51.7349 136.708 52.4595 cv137.491 53.6753 140.095 53.5815 142.206 52.3867 cv145.053 50.7759 147.058 49.3892 145.987 47.604 cvcp0.8471 0.898 0.7451 0.8275 cmyk@137.993 51.5308 mo137.993 51.5308 139.274 50.4453 144.588 47.647 cv0 0 0 0 cmykf137.993 51.5308 mo137.993 51.5308 139.274 50.4453 144.588 47.647 cv0.8471 0.898 0.7451 0.8275 cmyk@114.152 31.3999 mo114.152 31.3999 111.652 32.1851 110.367 33.6841 cv@116.571 35.5552 mo115.009 35.7554 112.582 36.6841 111.154 37.897 cv@150.022 49.8901 mo150.477 49.0532 151.06 46.9175 149.486 46.0249 cv146.877 44.5415 144.065 45.4751 143.741 45.8228 cv143.431 46.1558 145.063 51.2583 147.489 51.3413 cv148.845 51.3882 149.557 50.7456 150.022 49.8901 cvcp0 0 0 0 cmykf150.022 49.8901 mo150.477 49.0532 151.06 46.9175 149.486 46.0249 cv146.877 44.5415 144.065 45.4751 143.741 45.8228 cv143.431 46.1558 145.063 51.2583 147.489 51.3413 cv148.845 51.3882 149.557 50.7456 150.022 49.8901 cvcp0.8471 0.898 0.7451 0.8275 cmyk@144.532 45.9302 mo144.532 45.9302 146.968 46.9619 149.187 49.2427 cv0 0 0 0 cmykf144.532 45.9302 mo144.532 45.9302 146.968 46.9619 149.187 49.2427 cv0.8471 0.898 0.7451 0.8275 cmyk@112.365 50.3882 mo112.365 50.3882 111.225 55.3872 110.796 55.8853 cv@118.649 48.8179 mo118.649 48.8179 118.432 52.7437 118.576 53.6001 cv@129.571 50.1738 mo127.857 50.1738 124.429 51.3179 123.501 52.0317 cv@127.071 45.6772 mo127.071 45.6772 124.927 47.1758 124.358 47.8188 cv@144.702 35.4692 mo144.632 34.2563 143.421 31.7563 142.421 30.9722 cv@148.272 53.9575 mo148.272 51.1743 li@150.271 53.1021 mo150.056 49.7456 li@0 lc0 lj80.9844 93.7866 mo80.9844 93.7866 77.0225 92.02 75.2559 91.1636 cv73.4893 90.3071 70.8657 89.022 70.5444 88.8081 cv70.2231 88.5942 69.0454 88.5396 68.5098 88.915 cv67.9746 89.2905 66.6895 90.9497 67.0645 91.8062 cv67.439 92.6626 68.0815 92.9307 69.2593 93.1982 cv70.4375 93.4658 73.4355 93.8403 75.0415 93.8931 cv76.6475 93.9478 80.77 94.2144 80.77 94.2144 cv80.9844 93.7866 licp@79.9551 101.5 mo79.9551 101.5 72.5786 101.229 71.7222 101.175 cv70.8657 101.123 70.0625 100.478 69.7412 99.8364 cv69.4199 99.1948 68.8311 98.1772 68.1885 96.5171 cv67.5464 94.8579 67.0645 91.8062 67.0645 91.8062 cv@1 lc1 lj71.1333 101.175 mo71.1333 101.175 68.7773 102.299 67.707 102.46 cv66.6357 102.621 65.9468 102.701 65.2441 102.675 cv63.7988 102.621 60.0508 102.032 60.0508 102.032 cv60.0508 102.032 65.9937 104.869 66.8501 105.297 cv67.707 105.725 67.9746 106.315 67.9746 106.69 cv67.9746 107.064 65.458 109.153 64.6016 109.581 cv63.7451 110.009 59.623 112.151 59.623 112.151 cv59.623 112.151 64.2271 112.417 67.2783 111.937 cv70.3301 111.455 72.3647 109.634 74.0244 108.509 cv75.6841 107.385 80.6675 104.638 80.6675 104.638 cv@66.7266 91.646 mo61.1582 88.3657 57.7324 85.2271 52.5928 79.9409 cv47.4526 74.6602 44.2402 69.8081 42.8115 66.021 cv41.3828 62.2383 40.6704 59.0269 40.6704 59.0269 cv37.7422 61.8804 li34.6035 60.9526 li34.6035 60.9526 34.5303 63.5981 36.0293 67.0913 cv37.5283 70.5923 41.9585 77.8662 48.3096 84.1509 cv54.6602 90.4341 58.9434 94.4302 67.0811 98.4985 cv68.6973 99.3081 69.3662 99.1406 69.3662 99.1406 cv@0 lj67.439 94.7905 mo63.0127 92.7905 58 89.2759 52.4487 84.2241 cv46.9512 79.2246 44.2402 75.8726 41.5269 71.5884 cv38.8135 67.3052 38.1709 65.519 37.8125 62.2383 cv@1 lj40.5967 59.3101 mo41.0249 57.5967 42.9556 56.9546 44.5254 56.7407 cv46.0942 56.5269 49.022 58.2388 50.6621 59.3101 cv52.3013 60.3813 56.0156 65.1646 58.1572 69.0933 cv60.2983 73.0142 61.6572 77.9395 61.6572 77.9395 cv61.6572 77.9395 57.4409 73.3765 53.2314 69.4468 cv49.022 65.519 45.8101 63.5181 44.3809 63.1636 cv42.9521 62.8086 42.0254 63.5918 42.0254 63.5918 cv@41.3828 61.3091 mo42.4536 59.9526 44.2236 59.8101 45.0938 59.8101 cv46.6665 59.8101 49.4473 61.6694 51.9468 64.0933 cv54.4463 66.5229 60.2285 75.5171 60.2285 75.5171 cv@55.1621 90.8628 mo51.6655 90.0796 49.2363 89.0762 44.4551 86.439 cv39.6733 83.7964 35.1758 81.3662 30.8926 76.5879 cv26.6099 71.8032 24.8965 69.0859 21.8984 64.2339 cv18.9004 59.3818 13.2627 51.6743 9.90625 49.8174 cv6.5498 47.9604 0.553711 49.603 0.553711 49.603 cv0.553711 49.603 3.7627 49.603 5.5498 50.3882 cv7.33643 51.1733 10.4751 53.4585 13.2588 57.5269 cv16.043 61.5962 23.1099 73.1616 25.8936 77.3706 cv28.6777 81.5806 32.459 87.2954 39.5996 91.5054 cv46.7402 95.7139 56.8721 100.072 63.3701 102.426 cv@67.3687 98.9263 mo65.7998 99.1406 62.9453 98.7856 57.0195 96.7183 cv51.0938 94.644 44.6719 91.2905 41.6006 89.2905 cv38.5288 87.2954 32.0342 82.437 26.0381 73.731 cv20.1182 65.1382 11.335 49.6733 6.47949 49.1021 cv@50.3809 86.3657 mo46.4521 84.438 42.5977 80.6499 40.6001 78.1533 cv38.6025 75.6587 33.8174 68.0161 31.6055 64.02 cv29.3936 60.0249 25.75 55.6694 22.8955 54.2422 cv20.0415 52.8149 14.5439 51.103 14.5439 51.103 cv14.5439 51.103 18.8271 53.3149 22.8955 57.8833 cv26.9648 62.4546 27.9619 65.6665 29.9629 69.4468 cv31.9639 73.229 33.8911 77.5845 38.6729 83.0796 cv@46.9541 87.7241 mo42.8853 84.1509 40.8105 81.7749 38.8164 79.2983 cv36.7451 76.729 34.5337 73.1616 32.248 68.8052 cv29.9629 64.4478 25.5391 58.4536 23.8965 56.7407 cv22.2534 55.0269 19.9712 53.4565 16.5449 51.8149 cv@33.4595 79.0845 mo30.7461 75.7319 28.1055 70.6597 27.3193 68.6646 cv26.2422 65.9272 24.9639 63.2368 24.3213 59.4521 cv@21.9653 57.1685 mo21.9653 57.1685 22.6782 60.8813 23.1802 62.5952 cv23.6753 64.2886 24.6094 67.3052 25.9639 70.3042 cv@55.5137 43.8911 mo56.5205 42.9727 58.7661 42.2837 60.1548 44.5337 cv61.54 46.7847 60.2314 50.0498 59.4385 50.6753 cv58.6152 51.3257 56.3335 49.8159 55.7275 48.3892 cv54.8276 46.271 54.4663 44.8452 55.5137 43.8911 cvcp0 0 0 0 cmykf55.5137 43.8911 mo56.5205 42.9727 58.7661 42.2837 60.1548 44.5337 cv61.54 46.7847 60.2314 50.0498 59.4385 50.6753 cv58.6152 51.3257 56.3335 49.8159 55.7275 48.3892 cv54.8276 46.271 54.4663 44.8452 55.5137 43.8911 cvcp0.8471 0.898 0.7451 0.8275 cmyk@58.8696 49.4595 mo58.8696 49.4595 57.3672 46.6753 56.3701 44.3198 cv0 0 0 0 cmykf58.8696 49.4595 mo58.8696 49.4595 57.3672 46.6753 56.3701 44.3198 cv0.8471 0.898 0.7451 0.8275 cmyk@49.8018 41.6089 mo50.8086 40.689 52.9839 40.356 54.3726 42.606 cv55.7578 44.8569 54.4531 48.6948 53.6597 49.3188 cv52.8369 49.9692 50.5547 48.4604 49.9492 47.0327 cv49.0488 44.915 48.7544 42.561 49.8018 41.6089 cvcp0 0 0 0 cmykf49.8018 41.6089 mo50.8086 40.689 52.9839 40.356 54.3726 42.606 cv55.7578 44.8569 54.4531 48.6948 53.6597 49.3188 cv52.8369 49.9692 50.5547 48.4604 49.9492 47.0327 cv49.0488 44.915 48.7544 42.561 49.8018 41.6089 cvcp0.8471 0.898 0.7451 0.8275 cmyk@53.0908 48.105 mo53.0908 48.105 53.228 44.6069 51.5151 41.3218 cv0 0 0 0 cmykf53.0908 48.105 mo53.0908 48.105 53.228 44.6069 51.5151 41.3218 cv0.8471 0.898 0.7451 0.8275 cmyk@48.8047 38.5376 mo49.0654 37.2026 51.8462 36.4136 54.2988 37.397 cv57.7285 38.7734 59.3184 41.3013 58.9399 42.6787 cv58.666 43.6909 55.3496 43.894 54.0146 43.1069 cv52.0303 41.9409 48.5303 39.9292 48.8047 38.5376 cvcp0 0 0 0 cmykf48.8047 38.5376 mo49.0654 37.2026 51.8462 36.4136 54.2988 37.397 cv57.7285 38.7734 59.3184 41.3013 58.9399 42.6787 cv58.666 43.6909 55.3496 43.894 54.0146 43.1069 cv52.0303 41.9409 48.5303 39.9292 48.8047 38.5376 cvcp0.8471 0.898 0.7451 0.8275 cmyk@58.1538 42.2505 mo58.1538 42.2505 55.0151 39.6802 51.3008 38.1099 cv0 0 0 0 cmykf58.1538 42.2505 mo58.1538 42.2505 55.0151 39.6802 51.3008 38.1099 cv0.8471 0.898 0.7451 0.8275 cmyk@42.166 35.1831 mo42.8521 34.0093 45.3115 34.731 47.3057 36.4692 cv50.0898 38.894 50.0425 42.3604 49.2329 43.5347 cv48.6406 44.4019 46.2646 44.3901 44.8062 42.3218 cv43.4473 40.395 41.4497 36.4077 42.166 35.1831 cvcp0 0 0 0 cmykf42.166 35.1831 mo42.8521 34.0093 45.3115 34.731 47.3057 36.4692 cv50.0898 38.894 50.0425 42.3604 49.2329 43.5347 cv48.6406 44.4019 46.2646 44.3901 44.8062 42.3218 cv43.4473 40.395 41.4497 36.4077 42.166 35.1831 cvcp0.8471 0.898 0.7451 0.8275 cmyk@48.0181 42.9644 mo48.0181 42.9644 46.2983 39.4595 43.3066 36.7539 cv0 0 0 0 cmykf48.0181 42.9644 mo48.0181 42.9644 46.2983 39.4595 43.3066 36.7539 cv0.8471 0.898 0.7451 0.8275 cmyk@44.3809 36.7051 mo43.8594 35.4487 46.0742 34.0806 48.6606 33.5415 cv52.2778 32.7905 55.3164 34.6978 55.3062 36.1245 cv55.2993 37.1821 53.8306 38.6968 51.3008 38.6094 cv48.9453 38.5259 44.9233 38.0151 44.3809 36.7051 cvcp0 0 0 0 cmykf44.3809 36.7051 mo43.8594 35.4487 46.0742 34.0806 48.6606 33.5415 cv52.2778 32.7905 55.3164 34.6978 55.3062 36.1245 cv55.2993 37.1821 53.8306 38.6968 51.3008 38.6094 cv48.9453 38.5259 44.9233 38.0151 44.3809 36.7051 cvcp0.8471 0.898 0.7451 0.8275 cmyk@53.6563 36.1118 mo53.6563 36.1118 50.3037 36.7539 46.3052 35.8979 cv0 0 0 0 cmykf53.6563 36.1118 mo53.6563 36.1118 50.3037 36.7539 46.3052 35.8979 cv0.8471 0.898 0.7451 0.8275 cmyk@48.1484 32.1548 mo47.6904 31.0542 49.6348 29.853 51.9063 29.3804 cv55.0786 28.7222 57.5947 30.291 57.585 31.543 cv57.5781 32.4712 56.0186 33.7612 53.8003 33.6841 cv51.7324 33.6123 48.624 33.3062 48.1484 32.1548 cvcp0 0 0 0 cmykf48.1484 32.1548 mo47.6904 31.0542 49.6348 29.853 51.9063 29.3804 cv55.0786 28.7222 57.5947 30.291 57.585 31.543 cv57.5781 32.4712 56.0186 33.7612 53.8003 33.6841 cv51.7324 33.6123 48.624 33.3062 48.1484 32.1548 cvcp0.8471 0.898 0.7451 0.8275 cmyk@56.1563 31.8286 mo56.1563 31.8286 53.0879 30.3999 49.7314 32.1138 cv0 0 0 0 cmykf56.1563 31.8286 mo56.1563 31.8286 53.0879 30.3999 49.7314 32.1138 cv0.8471 0.898 0.7451 0.8275 cmyk@39.8809 37.4673 mo37.6689 35.6113 39.9507 33.4707 42.8086 31.6841 cv45.5557 29.9692 48.7178 30.48 49.4038 31.5278 cv50.3037 32.8999 49.3198 35.5342 47.3057 36.4692 cv45.4282 37.3374 40.834 38.2666 39.8809 37.4673 cvcp0 0 0 0 cmykf39.8809 37.4673 mo37.6689 35.6113 39.9507 33.4707 42.8086 31.6841 cv45.5557 29.9692 48.7178 30.48 49.4038 31.5278 cv50.3037 32.8999 49.3198 35.5342 47.3057 36.4692 cv45.4282 37.3374 40.834 38.2666 39.8809 37.4673 cvcp0.8471 0.898 0.7451 0.8275 cmyk@48.2559 32.4302 mo48.2559 32.4302 43.5278 33.9233 41.3096 36.9683 cv0 0 0 0 cmykf48.2559 32.4302 mo48.2559 32.4302 43.5278 33.9233 41.3096 36.9683 cv0.8471 0.898 0.7451 0.8275 cmyk@36.6045 38.52 mo37.8359 35.9097 41.3062 37.0376 43.1631 39.5376 cv45.0972 42.1401 45.5757 45.5327 44.7358 46.4614 cv43.6382 47.6812 41.7109 46.1934 40.0244 44.7476 cv37.5249 42.606 36.0728 39.644 36.6045 38.52 cvcp0 0 0 0 cmykf36.6045 38.52 mo37.8359 35.9097 41.3062 37.0376 43.1631 39.5376 cv45.0972 42.1401 45.5757 45.5327 44.7358 46.4614 cv43.6382 47.6812 41.7109 46.1934 40.0244 44.7476 cv37.5249 42.606 36.0728 39.644 36.6045 38.52 cvcp0.8471 0.898 0.7451 0.8275 cmyk@43.6045 45.3403 mo43.6045 45.3403 40.7373 41.1079 37.7393 39.0386 cv0 0 0 0 cmykf43.6045 45.3403 mo43.6045 45.3403 40.7373 41.1079 37.7393 39.0386 cv0.8471 0.898 0.7451 0.8275 cmyk@33.3857 38.4673 mo32.1709 38.0391 30.127 36.1699 32.5293 34.1841 cv35.022 32.1167 38.0972 31.3291 38.7397 31.7563 cv40.105 32.6675 40.0913 34.9941 38.7397 36.7539 cv36.7314 39.3628 34.5605 38.8804 33.3857 38.4673 cvcp0 0 0 0 cmykf33.3857 38.4673 mo32.1709 38.0391 30.127 36.1699 32.5293 34.1841 cv35.022 32.1167 38.0972 31.3291 38.7397 31.7563 cv40.105 32.6675 40.0913 34.9941 38.7397 36.7539 cv36.7314 39.3628 34.5605 38.8804 33.3857 38.4673 cvcp0.8471 0.898 0.7451 0.8275 cmyk@37.96 33.1538 mo37.96 33.1538 35.7383 35.1128 33.0278 37.1821 cv0 0 0 0 cmykf37.96 33.1538 mo37.96 33.1538 35.7383 35.1128 33.0278 37.1821 cv0.8471 0.898 0.7451 0.8275 cmyk@35.3799 41.1787 mo33.4229 39.0566 35.728 38.4575 37.5952 37.1108 cv40.6636 34.8975 43.3369 35.4575 43.8057 36.1821 cv44.5889 37.395 42.9087 39.3208 40.9478 40.7505 cv38.3081 42.6787 36.2266 42.0947 35.3799 41.1787 cvcp0 0 0 0 cmykf35.3799 41.1787 mo33.4229 39.0566 35.728 38.4575 37.5952 37.1108 cv40.6636 34.8975 43.3369 35.4575 43.8057 36.1821 cv44.5889 37.395 42.9087 39.3208 40.9478 40.7505 cv38.3081 42.6787 36.2266 42.0947 35.3799 41.1787 cvcp0.8471 0.898 0.7451 0.8275 cmyk@43.3066 36.7539 mo43.3066 36.7539 38.4521 38.1812 35.8115 41.0371 cv0 0 0 0 cmykf43.3066 36.7539 mo43.3066 36.7539 38.4521 38.1812 35.8115 41.0371 cv0.8471 0.898 0.7451 0.8275 cmyk@33.165 50.312 mo35.3701 48.4453 35.9492 50.9634 37.3105 52.8149 cv40.0947 56.5981 38.5488 58.502 37.8057 58.939 cv36.5615 59.6719 34.6572 58.1167 33.3125 56.0981 cv31.4951 53.3813 32.2178 51.1206 33.165 50.312 cvcp0 0 0 0 cmykf33.165 50.312 mo35.3701 48.4453 35.9492 50.9634 37.3105 52.8149 cv40.0947 56.5981 38.5488 58.502 37.8057 58.939 cv36.5615 59.6719 34.6572 58.1167 33.3125 56.0981 cv31.4951 53.3813 32.2178 51.1206 33.165 50.312 cvcp0.8471 0.898 0.7451 0.8275 cmyk@37.3809 57.312 mo37.3809 57.312 35.8184 53.4966 35.0991 50.1738 cv0 0 0 0 cmykf37.3809 57.312 mo37.3809 57.312 35.8184 53.4966 35.0991 50.1738 cv0.8471 0.898 0.7451 0.8275 cmyk@32.4658 50.2773 mo31.9102 47.4419 33.9614 47.8921 36.2402 47.604 cv40.9014 47.0151 42.2427 49.563 42.2632 50.4253 cv42.2969 51.8687 40.0879 52.479 37.6689 52.6714 cv34.4097 52.9341 32.71 51.4976 32.4658 50.2773 cvcp0 0 0 0 cmykf32.4658 50.2773 mo31.9102 47.4419 33.9614 47.8921 36.2402 47.604 cv40.9014 47.0151 42.2427 49.563 42.2632 50.4253 cv42.2969 51.8687 40.0879 52.479 37.6689 52.6714 cv34.4097 52.9341 32.71 51.4976 32.4658 50.2773 cvcp0.8471 0.898 0.7451 0.8275 cmyk@40.7373 50.3882 mo40.7373 50.3882 35.8115 49.3174 33.1719 49.4595 cv0 0 0 0 cmykf40.7373 50.3882 mo40.7373 50.3882 35.8115 49.3174 33.1719 49.4595 cv0.8471 0.898 0.7451 0.8275 cmyk@28.7515 46.7788 mo28.1963 43.9434 30.2471 44.3931 32.5259 44.1055 cv37.187 43.5166 38.5288 46.0649 38.5488 46.9263 cv38.5825 48.3706 36.374 48.9814 33.9546 49.1733 cv30.6953 49.4351 28.9961 47.9985 28.7515 46.7788 cvcp0 0 0 0 cmykf28.7515 46.7788 mo28.1963 43.9434 30.2471 44.3931 32.5259 44.1055 cv37.187 43.5166 38.5288 46.0649 38.5488 46.9263 cv38.5825 48.3706 36.374 48.9814 33.9546 49.1733 cv30.6953 49.4351 28.9961 47.9985 28.7515 46.7788 cvcp0.8471 0.898 0.7451 0.8275 cmyk@37.0234 46.8892 mo37.0234 46.8892 32.0977 45.8188 29.4575 45.9609 cv0 0 0 0 cmykf37.0234 46.8892 mo37.0234 46.8892 32.0977 45.8188 29.4575 45.9609 cv0.8471 0.898 0.7451 0.8275 cmyk@27.7744 42.2153 mo25.3516 40.6401 27.1055 39.4814 28.4839 37.644 cv31.3076 33.8901 34.0718 34.7017 34.7041 35.2876 cv35.7646 36.269 34.6641 38.2788 33.1182 40.1489 cv31.0371 42.6699 28.8218 42.8892 27.7744 42.2153 cvcp0 0 0 0 cmykf27.7744 42.2153 mo25.3516 40.6401 27.1055 39.4814 28.4839 37.644 cv31.3076 33.8901 34.0718 34.7017 34.7041 35.2876 cv35.7646 36.269 34.6641 38.2788 33.1182 40.1489 cv31.0371 42.6699 28.8218 42.8892 27.7744 42.2153 cvcp0.8471 0.898 0.7451 0.8275 cmyk@33.5264 36.7539 mo33.5264 36.7539 30.0532 39.9702 28.3164 41.9639 cv0 0 0 0 cmykf33.5264 36.7539 mo33.5264 36.7539 30.0532 39.9702 28.3164 41.9639 cv0.8471 0.898 0.7451 0.8275 cmyk@26.6738 46.105 mo25.0137 43.7383 26.0044 42.0659 28.1792 41.3315 cv30.7422 40.4653 34.5166 40.3999 34.8848 41.1787 cv35.5005 42.4878 33.874 45.0215 31.7432 46.1772 cv28.8682 47.7358 27.3931 47.1216 26.6738 46.105 cvcp0 0 0 0 cmykf26.6738 46.105 mo25.0137 43.7383 26.0044 42.0659 28.1792 41.3315 cv30.7422 40.4653 34.5166 40.3999 34.8848 41.1787 cv35.5005 42.4878 33.874 45.0215 31.7432 46.1772 cv28.8682 47.7358 27.3931 47.1216 26.6738 46.105 cvcp0.8471 0.898 0.7451 0.8275 cmyk@33.0278 42.3218 mo33.0278 42.3218 31.5986 42.2505 26.4092 45.2729 cv0 0 0 0 cmykf33.0278 42.3218 mo33.0278 42.3218 31.5986 42.2505 26.4092 45.2729 cv0.8471 0.898 0.7451 0.8275 cmyk@22.8926 44.2495 mo21.9653 44.0347 20.9316 41.6528 22.106 39.6802 cv23.8896 36.6821 26.5762 36.103 27.0317 36.2539 cv27.46 36.395 28.5205 41.7368 26.3892 42.8921 cv23.5146 44.4517 24.1069 44.5308 22.8926 44.2495 cvcp0 0 0 0 cmykf22.8926 44.2495 mo21.9653 44.0347 20.9316 41.6528 22.106 39.6802 cv23.8896 36.6821 26.5762 36.103 27.0317 36.2539 cv27.46 36.395 28.5205 41.7368 26.3892 42.8921 cv23.5146 44.4517 24.1069 44.5308 22.8926 44.2495 cvcp0.8471 0.898 0.7451 0.8275 cmyk@26.4595 37.0376 mo26.4595 37.0376 24.8193 39.1094 23.9629 42.1782 cv0 0 0 0 cmykf26.4595 37.0376 mo26.4595 37.0376 24.8193 39.1094 23.9629 42.1782 cv0.8471 0.898 0.7451 0.8275 cmyk@22.7485 48.0322 mo21.7979 48.0415 19.9775 46.5386 20.5366 44.8203 cv21.4639 41.9639 24.167 40.7563 24.6426 40.793 cv25.0942 40.8296 27.3965 45.7651 25.5996 47.394 cv23.1802 49.5933 23.9966 48.0161 22.7485 48.0322 cvcp0 0 0 0 cmykf22.7485 48.0322 mo21.7979 48.0415 19.9775 46.5386 20.5366 44.8203 cv21.4639 41.9639 24.167 40.7563 24.6426 40.793 cv25.0942 40.8296 27.3965 45.7651 25.5996 47.394 cv23.1802 49.5933 23.9966 48.0161 22.7485 48.0322 cvcp0.8471 0.898 0.7451 0.8275 cmyk@24.1304 41.4067 mo24.1304 41.4067 23.0293 43.8091 22.9292 46.9922 cv0 0 0 0 cmykf24.1304 41.4067 mo24.1304 41.4067 23.0293 43.8091 22.9292 46.9922 cv0.8471 0.898 0.7451 0.8275 cmyk@25.8906 48.1753 mo27.3794 45.6938 29.521 46.5933 31.5688 47.6294 cv35.7617 49.7573 35.6343 52.3047 35.1689 53.0298 cv34.3862 54.2466 31.7832 54.1519 29.6719 52.9575 cv26.8242 51.3467 24.8193 49.9595 25.8906 48.1753 cvcp0 0 0 0 cmykf25.8906 48.1753 mo27.3794 45.6938 29.521 46.5933 31.5688 47.6294 cv35.7617 49.7573 35.6343 52.3047 35.1689 53.0298 cv34.3862 54.2466 31.7832 54.1519 29.6719 52.9575 cv26.8242 51.3467 24.8193 49.9595 25.8906 48.1753 cvcp0.8471 0.898 0.7451 0.8275 cmyk@33.8843 52.1011 mo33.8843 52.1011 32.6025 51.0146 27.2891 48.2183 cv0 0 0 0 cmykf33.8843 52.1011 mo33.8843 52.1011 32.6025 51.0146 27.2891 48.2183 cv0.8471 0.898 0.7451 0.8275 cmyk@57.7256 31.9707 mo57.7256 31.9707 60.2251 32.7559 61.5098 34.2544 cv@55.3062 36.1245 mo56.8691 36.3257 59.2949 37.2544 60.7236 38.4673 cv@21.8555 50.4604 mo21.3999 49.6235 20.8179 47.4883 22.3906 46.5952 cv25.0005 45.1138 27.811 46.0459 28.1357 46.3931 cv28.4468 46.7246 26.814 51.8281 24.3877 51.9126 cv23.0327 51.959 22.3203 51.3169 21.8555 50.4604 cvcp0 0 0 0 cmykf21.8555 50.4604 mo21.3999 49.6235 20.8179 47.4883 22.3906 46.5952 cv25.0005 45.1138 27.811 46.0459 28.1357 46.3931 cv28.4468 46.7246 26.814 51.8281 24.3877 51.9126 cv23.0327 51.959 22.3203 51.3169 21.8555 50.4604 cvcp0.8471 0.898 0.7451 0.8275 cmyk@27.3457 46.5015 mo27.3457 46.5015 24.9102 47.5317 22.6914 49.814 cv0 0 0 0 cmykf27.3457 46.5015 mo27.3457 46.5015 24.9102 47.5317 22.6914 49.814 cv0.8471 0.898 0.7451 0.8275 cmyk@59.5122 50.9585 mo59.5122 50.9585 60.6533 55.9585 61.0815 56.4565 cv@53.228 49.3892 mo53.228 49.3892 53.4458 53.3149 53.3018 54.1714 cv@42.3066 50.7446 mo44.0195 50.7446 47.4492 51.8882 48.3765 52.6011 cv@44.8062 46.2476 mo44.8062 46.2476 46.9512 47.7456 47.5195 48.3892 cv@27.1753 36.0405 mo27.2456 34.8276 28.457 32.3276 29.4575 31.543 cv@23.605 54.5288 mo23.605 51.7451 li@21.6074 53.6724 mo21.8218 50.3159 li@%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.0%%For: (Hiroo Ishikawa) ()%%Title: (waseda_logo_bw.eps)%%CreationDate: 05.10.8 8:04 PM%AI9_DataStream%Gb"-6$$5^\Q5GoP_#L'e'"*i%8-5T1J0;5fe@ose7#<*:0)*'V;G#-H2jLZ^-^/T;fNB3KM)-s]A0u<L<?Aabc]@naNG&5ZcKPKO%!>#t<o&dLNL\aORBQTk1IJ3*X*K=gY?DCD64DW2K/rb]S;A`'(;t?;($-BHJ/.7SRFK9R_mIZ[%B9[4u'TT)eN.c+?E@!2Li3dYb%/dZP:hUS+WhKuZX4_cq!eP7LDX>en)V6ShM`Q$PZnJRo4a0)H8HLhq_>.n$eMaZ+_oRg#A=,ghh^"=@K`!*e$8e5+/<j*M8hFlBW%5`j7MmGnAKnZ2gm6*9o@]tN5Mf6`eJ&_'scCqmmJ%R*]1aPWoGDAW-NJ;=28DZ=H1fB[OJn"^#pafa:@\"EZGDa46S[ibY;\"EX8%rr(=GoBjSJoBiG?r:\US\soNJ'rp`)HEg\NL_6J*4?]!(#sqll$`UiZllG:3.A%2.EB1!H@nAsW"4#?AC^P,SmjVBCn&b2J$^K92%C=QZB!WL6L7^q&rTh%/CPpuFVG5&B;/&4Y9$['=JN+Gmr4Hmm!kjt!E^"PYce@N$el?8IoYhuN]lUt`N=c6-1,)ueHM<l06>+e].%5?GH^)U3T3>AH-i2Ze=/UU4,#^5=/+U^\<PWf9@:SA:[2"RK>>/eSQnjT*[V$8dkgougi;MDZiGAjolReq#^JWYIsRd5usM4D`W@%CQ0VERe!]9Y#VPX<huu/r?-NEB5IUSr'(>uHJImg)[nAbFLch#*Z2cm;qaLq"mE0fX9#n#.0K>c"5HAR.R9[D]1'@?]c,Y*rc1^0%^5K?G^qXCm5Cofl?T*h7\K&AR9]C7/=UmXcBei8P)@!oMhi_P%--Q'VQEcZ*@jtP=$smR)Me01s/<e=&TAVYob%@mmre6tH.[S%N%\K&>ObMeXi%a,[n4uEaO`jZBZT,Ru_LI+\nV=;hIku2tn5>T/Sj!U/052dlT_ERL]dV%2Wr5:AC,Q,K/F%jr)Ytt.O^T^6'M)A-m%d@.=1pkeshDnM!V_DWi$C&;!>qh:YE`\?m'+!60+ig=2;@L59`S$_>mH3u`fNOFk/o.f5NkW^VPrPMF4M2i_G217qa%)9%]p5b7g%`<q#0qhLg=$[YCa+$V48GR$I<'_W&%kpTFZTm3F$@uHi]&9:N1I*=!d'^JkYif2uPp7+I1OAiZ&]<l06?F0k8LLm]6S2.?npbqLs%I>\!@:Fns!)uE-F6JoaX/;(Wo6oeh"hP$=3/Pt`p1sBZf;]A%u.>?1Ok6jJN'^l_sMKRW*`>_.h7tgVr_N(I;la1j35(-3+;912!%;JN(=:2rX:0ZZIN^D=<-G9To0XVPPh4B]$eWLMAM7=Y*@773ToX\n4_[`/=kig@Zn/SoB.3P<"1=tb;&'F"%<^St0Hffr'&:TSL2%09r9HX`+%h&l#:g*UB3o"'n7m=l8jY-:<8q1;)u_qkpIdM=jUCBc?qeIFE\.W34T2ei3PocdUe&2uP+ks/8'#Z,9?uY4O[Q7DGOG%;C\#*)gX8X(m8?=5aP,uXrqmDGelOKd0rCi-'@%=FBOCVZ3:-$Dh(jMrY>rK8GbN%DeoO0c==P,=!6l=p!)3&G>am'VfgDi?':-T%e>fF?%rabNiO44<9kCu0G^o>]Y^SF5YQlTd>87k9'D=><Qk<:q,40tITm.8N_aoFE_kDfH)WI1a[^AD*(&/^p1f,7(J\u&;K9$aq%_\t&VJk4)&gU;Q-Li"^LZol4cW'=q43H'IWhe[lAG2gVH5@VmH"ZB-:4lBd,@uUK:MP+Fn4\!>@>9Pi'OMB]`Gq6dPKl-Fj&/oUX%db#>f;5+l'dJaD,_7;i"!G%uAQ'N!rR;rpUS)BaBSUrV!X$F[/LPF_G]PZ#>qe/Z33-F&<6kKXVl<P0O,1HB[^WF*48&dWbZPNc-%j=0(Yjo)V[J4E%S,h&Y^eYI:*`rr@FgOo%JKcIu2`@mocKRrVGiG+7>'_WL@&a;ESiE\lRFB)kt%6Crk?4rV;Est6YT5l>/@;q_c%3nB5^;989%=sp\=@5uTk?\!24HN5A65DiYr7AY^4gSfYPQ-ul`_U1.#DaP<I7e)Li[=ZVtd,NfEYH`Kj`rl<N)i+_90q%bLUf!H;%Ls_#Li?rl4l'MN8bP7!)$$cqp_VZ\^J0.X^GW!Oe^cH]LZt709rhb+[k:#0:$n[=L,OuFT6'qs+?sg-.aAmo=ab\nXPPu,p)166k%CM=)0/?8=`*<Cjrd[Ui@?Lj%=6/5?H?tk:YNWd1Y6D]r>A.*s@e-Oq5PNrWp`"%ekQK@a1i':L3AWho>*7dA':Z,>@%S(5-nUS+q%<0ErW+k?XV,c>3#@1532(65o%+]'j`&bi4k&P>[-pb\7'qOk@]>1HCF8CN6HEg05\?VFoJN&jWNTk0Yc<,c*H/>YQT*=Pki,">/[%^afNm#T;&,5#(/.)sNFU,=hDc@YVTin3l.&f!m^Tq1M(cmr7Yilg&m"kuFODAFTkX*c&Q?Wu3[a,4@0*.K#+H3_:GLhtA-PKoVNl%r?Ad&OE&f"?ZR,2s%qTL)J5-?.@!FWNH-?*L(*)\JT-Qu208ad$:a<TF@A&@6:0lhcULSnb,!N]V'2/5`Y*V-\EC0:@/QLfF?rD.%W;ppl(Xa^s>]r]\Bale0Q)'X7H(;_QRYPW".aa)H^j]2hU8*`e&rD_/1*#-nrLpNZ53"LEjR`rD*&:,AejX^?_?Dcm0T"!?Pq9C>%LaHSS'%c]EiYc)O'I0J%<2e#+W^%RsgSD&.REKi,6;8^-V%T?Y*ri*U,@pQWBNUq?Jhi)SLY8GWBuNnoWmGZ.*=TP*Ui.D?D76"+%p8P3XBcT0B7.5pEj%,h!VF-^l27P3216_?#V\0[mQ&M>C;$uD-PSo-H"YQ.@G%9Q%\:I1]6KdDM1;5.]g%u]N!?tALg06>l1B+-d%(Ze]#<U^fRF$3.R-^L$rF8SlqM^)imL5[OEbtOH:g!@&7e0r`WU6J@=(/t6igg[)WaQ8uX`4j+W,NLQH,.18b?:C`@5V`sC6n1c%%aeVc4A6o`*"%lL6gmHlLGKIo<M?fXr?-'%f0CZD@o`NTIUd%7W&Nk.#PX&j@!00S'Dl.^eg'4l['rhcU-6*&DHcjCaer<(S>gTIh%7<G_H@>D4hYgL^o9NiUi5[=H!4;>RGpk-f"<^gU^$)mMF(+fDLHBmU)bH-&&+d;f9D=SLU/Q2EgcXj,3\W)/WX/H=-/jn8M.ETVu%8QWccN5*a=c>[WnEZQC0O6@XB7oQ$XbFD-/@RX+.@J#pq)FL?E-a?jRJ&,YLl+O&V.%Sg&-%XgM<%:e;;jdbU$krLna/fd52c+i1%D*@1K0V-OlFb+:R68'5*1?,f?W&ESf"ioEX<c7N^+_,^OQ;;&#_hlAH.A`CpV\5]\,Ner:<k"oPBV/:gMQ-=41/9^'"3#k'O!*#p%k\+5T1-%i"T("8t"n>5@e-_ssMcupp)j)SoEbgciTVdc:+fBg0aicgbC3<ItZ^8^Nb"X9=,>g#84^2gO;Ku3jT&:<X.MSq^.B$St%&?=gJ"6!+sTk5BgCld7sU_RWm:hk"8s'bo%?c%:i9np0U2<Rrab5c=<>&E';2R17a80SA='lG]8@s0*E7KT?&k+P[Y6"Go!l&bUr%dNad_jjA#q&D*/05`Xu_05*%"QZD)Hro.dPU0VD/3KJ#5*ocR"\4g:PC3m&bV&$tCp0f17Nc,nUQ/W@_51?*t`($*B$ale/m\P#=%q'@6];@9hh,oSujr[Q=YN5MW#cRgr%O*e-f;2]A+j)P%TQN!bD%i.m^:hXfa<9hF?<+]>u%[F"o9cSVhVhi<^`'.AYK\KZujtJjB%WPfSa#\Jn#8p#[)7S,=WO@\IC+'FkRZ2!#PTA`6%hPjr'NDuXIM/8n%2V4>76g&=E#U%q83FHe6O4ZWFauRs)U&H81dAUtMD/(9n%AK/*,PQPS=OkAhJ:.MueCkmsWhI,3L6$7cfNebiP-Z+c()FZC"220:!'kmMsq6_u_F@\'Qs,E-NAu1pLaIr&9$4X7P.7Rk/DQ6Wd%c=O.]W22p?W2'Rf#q`up4j.U`F]!Tr14WIT'JF3UNZkgd:`FB.LlDYf=GBHqB"-l(/4rAMKFt$MD*uR8()PpVJkN*_W-'6PnM#A+%)V5`6*YB-(p46WEfJZ35$4H;3QVF:5#2r:.@;MG&"gc+7D+q$5Ok>OrY>`&na*O]Ac?1h;2J,%4Dq0Mmko#Ud4o?nKBA=OSI5+Dg%b@'5)Atj`->+46$5m^9MTD!t`n07P.kQoSFBZpbJ?kSl!3>tbgdS"-m&Z%C'@khn_`]mBY)V[2'9YO[#c>tgEP_uo%\3YGGa^HB)%:d<qepPgV5)8u+(1.]o.H/8oQO#+-o^.mV)<6gl^"gu[UXi;pr@O5uRiT#Jd=dT%q^4AgEL\\0O>W8U7Tg"#R7oeu:.Q"k/q4;m@%bi=eq-\ub!<TLkQO.u.="gQCAg`iN4l%+l&Ctb>PHX'CeJoo)gjT1;*R#k6!-'FG=.3/Y.)j332@WBcI&GH/5(4F#t$&rrpIT\h1%rMEbUfJkEKBZ^\2>3d+0>Q!:?Mf+rFG/_rV#(o=:;-*#g>$T!UA3D8Z3?@K;T_TRoYJe$%M+Ar+U)kcKDp)o>T"]f(7UcCoG3\t"%AG!`$P:`(qGKe*I%E!QjF"Fi@+Hc]2.6e6`R?T0p4!VZ=)s7G3[57ZQ&t)3/\7\GhTSb)pUb*+>>;c%5O"4,!BU^/A9UMfDcgY$a%N<)nKP"%ir<"ummV)6M++uiS*U_I8#1llc'L[n:Bl;=L?TJDnogrN=*ga@XQ4pj<FE&odgc#[%cOQ"R7W!Mql$qf]I_Po+1R?;<m%CaC-$BDNRL/s'!eMZf/ke!LL2+/9G5e_29u5;i>e3M2_HZiPrQ6Hs'LKn4P&4B>pLj//cI_n<)[[0/LVU8=iP\2qTb%<d<m410E4%X&Ec<E69^BC=CWm8LuejitZq_Ja+"%0?IH<UX$ie\ZNgKBHB$=rYMsC1OMB=nf%8;H0!%)T4`J'r0qFVe&,*DZp]\tR('l9@iHl"%$e\hNWK>ba5i]qM<d<EHJln9)g/(J4<fOqjqo#h^YZWDe+enp&hoGO9N5Y5<.tns5fS[E7(9()GHG[,#WT=rFeH")g`gZ,GBKHb5%8*#(UB.J(f6aN:Q\E5NugH6fT,B($<U)'36qOY'1HWl;0H\+9T_`TDP&&G\d7?(2eh1NNA2K%@*gZ6lL'.5NLWD"VpS7m\6G]k"E%"dLHWp45N'9?ai=Yo`&*P*hc9IHW(Nk$/hVU)X6ShontU/QMo^EXV=^eV.gW0#M0[9Ib(-nr1n*Zi;9h@<j7`HH2V8A9KQD<[I6k%Mo"GOQJ[LHb,O0k8.%H\c?pqcRT62gZLK)ZZh>7YQ-<!"b,7-Q\*uAC,_a:$W<B'f*U>_d9uke4/-9:Mlf@ZAPU\(L4HdL.01r2H%$B]?BNLCe((2#C:#cRht>L=ZF[qH2>dUY+M@@$1*e[5-'%8(9NWR!pV-4FY#*^StO"j>VrX`D"jRV?#k`jf,MJU$X*Xu0qb?J+Tg%UOA"c$87qlZeA8Z"Hu:6GeAmAQfFq+HjGid,0(t&(odsSm`,r5&FLl&/#LC7X_)f7es_<4[X"+*q]"%s,-uS5bLX"31_%H)Hu=IS%V8@Wng)cmBV>*atc[nWt)2Hr0L%gDqNR8ZPm&;=@(738)DHUj-EGD^mTbL!K6:4Np/W\%ZTtiX=;@9gNH#/DZ$j^1a=VsK)/>bf4%16M<u`ai$1g^UqmkOc#AKq/!4CqYh9WeSW*e'ceBH4W:?_l-":2DUan@Js,,$mEN]k?=J1"uKqD39S[p4/ODIaGM'jim=-<0V_0Q%3jZk>)5tm#B'qMlYrDPH0X%D'4:5Rer`.@?,NbDNgfgP?#+^m]er7rfiu0tLiH)EV11DbQ9TPdIDD=ge1N^Q;r.qLkZ>g!<J5%N%%0PS5FWA`"7dQZ-sqJDREAdlT(AVoH;hdtBD7O(6#N0]^*da+'[W'^_(e"YW3o8`pD4Qe=qG2t&6U.D%YFQEkGMTd?>SlSR2A8pfW%5&H`Y([23%H]@[P*\h&EY-PPL?"HDe#,:Vnf12R_I%u9$n*+2ijuXn^FSM$sUNX!#I&>66^WD\gC:Dfhf`gI2_a+r.f,D0Y5B9#\%A0-cr4a=?eDY@8gNMgA6VH0.^l<'a>q%q@eLS`U;\N;kg]9S'11Oe*\Ttn-^K0M!eTA[aII[!BSGd5hg%;bUBN9LZ90s09t]SmSo%brSg!+$n0BfrZNrIt`%<=CWP(TB!t9p,e')Oe[,r,QTUomBR$TgeRi="R&^fq_G&!X,T`l#,,%<MRST&04EeF*p1\(]P@lY*FQ-l%fUuVu+]Cq?nDiBVDd*,/Qkbda=j-E'U%`cC")>Fe%/dmVIg.qRd(*W!?@-Q+>;*Ci+5ArZ3lqM_2qc.\mB`AZ>eNK4`UD\Wc$HM`%mc`-1S`]rN?5j!jqr)0+2sS@?n0<2aQ'7iAOfhtNWBjN-9g.#F'p.d[]iqm[Fp'X>$PPqK:1&l1?8(:'9='<]#NkRR!C)<:J9pmf%fm^EA@A.\i?L][OO4#A<^'dF:+_hV\m'^BZ%Nu,D`C@*q7d`@rmT11]pYk?s*:TZ%1-nW!J2LlHG8:ts$mB=YCY0\H[YpChQrm!k%Z*Qoppg1(]4gS@&U+dPV]K7I!V8or8j<h/F&[UQ@R$V8gZ?`:k/&eZeGtI-er^Fo+5VKr-YIo/Fm)k`_AmQt!ZK@F/#T7e7m#pmr%X9%g27`O?hr_(E`\<:f&"D0'G2UZl\FLZ@*%5'N/Ke&?fi.;cnl#[98,Zu:J]b;S="0R#DLPl:*;^u&*<!FrYl\G'+0:A!]6:;)N%"0R#LLF\_@i)5bA\2$VZ/i`t5V3=_>R7p4lM+Jj>8-T)9r.2M`lT&7'9@^@p#-;_\TM7^`OtL3%5q\eYF1Ig,;fgVs-E"X*kL-n?%/t%oD,%/^Co'gs#dkiqVA[RJoBJOZe"cu9D#RE<;]W/"m<DumT$bi[9b%_i@PuK&0"@O3^HreSUZ<C;RB![o,P*H&>.HlBu!Q)Xr%M0qe=j>%WuR+Y.[UB'dM6l_+KBPlse3BDCr4YP@Kd_)`=N@p`fmWmnW08o7WM#@Q+9\8D):\)4D2WD2Q.F0O3F'6^57r1C(T.ArI%AZ^lP'^rZe.0Q$UB!of4`#!DZ+V9Nu,8X1IR"rir8KLNXF;Y#il:%EpX/UZjLs)0:.gq\9/tb01aAN*!Q1Al3P(D]>n:MH$,JXQ*%%D[),We<qX@$V40)B_Yh69s@[U%77G#"o8A@4)TfX8r84k)BqT<8^(a"hH!"Mk$7](NOO;0&Z'&!#OVp]0IJ]2;g\5"t10@ktHcO%#aJXC1P"59"@5UgU^\MpkZAuDYS.9Ceq!cs)J.t<)%8nX=\9kMbbYWk1'Cf"_,?l_#;MDf.$4fcZ31IodX?ai>9Y(7>uaEC<RO%s%QpJ;/OfkKO-SbgNNBj$^n;7@o'S-ghbK?idaZ3LbaEcG=JL\N5-38g7J6l).8lee(%7H2YjMC:$J5RX0TbJV>c6sRc^-Dj9O9;JD%cPXIU,*5&&:nNbulqfs%A3lMp+B*BD/I$1*#h4uiECkfL_+8)P'08E+kocH(i->n_-]&3N5^"S!_m5^<!\L>7&Wgl7n@f0=Q%\*i%KCi)-%VA!JC*4=8OH16d'nPG/0[sfuT*iZe/BCa!,c_Cfeo8_]5AB2&H-8&9M@:sGij+KhN)QHs?Bi)ZG,_VplaWGd__"no;TLGc%S>+4VmbDj1q%!U)`"K:t&T"o\84O?rkY)5-dt$kl5_$;n2\#DH"M,:5h&AVW3Y8@sKUX8;T;m7<lD^5M.NT<eE3R3$4)/r$.J+TW%k#nS&dnGTs"eKAL>@i\]lKfeHf:]6s;g%##%6-9s@3A7`GVj@s:-T+//Fu6m6q17Rl_HjRARD8VMfYU^$5*eAFYM:]^l'VD;S\\5%N3&[3kklbO`!%TX*Y[OB-C'7f[$4:ISNP?;=>go?VNMfJH5_W(KINpDYf86^e<(@XZ>#)W9%-[I*2a+_P[n#i-5BaeTo.<f5t+'_%+e?J55X\J33<1KV%XQ?"lbK6r`iOj>KesQ<+Xj^^R#._LSF%%$-u"H5"<!.H!Z]Tsl$+tcLj2Q.1OW(0-k8+M]'0<9><\j.0?[\a%4l$"h]`6Zts4P'bft@@<]`6Zts4P'bft@@<]`21,hDGH7Qa\gG*N4eOR!G-6I`#e;`5iK7.Cup`f2+s5X?3nNkHshS995Q^etq"O%r\)O!'YBOPd$'j%a3?c"RX>^rlD&Np7\i&PrTr*B]&*Q_$d8`q(kE8c3g=kQAHrij@l"0286:JG3+6gTil&gXbB!8,B+HO`Ic\h4%s3$Nt@ofEu/B]TL/i,Oo^`a@A'CAK#1r7b%&9Cbq"(i+>1J_aO_\5a?1d:<hB:A$b1dQs1C7:jG&7q^e2b(><C)Nh58ST->::&Ge%R&Ub-D9>Q$53%lP]g)D,_tq#D.P@T`0Kq-C):3Rf)+T=ShrP;G3lp>%AfC"l04a;\gm,;EID+?k,^(-O?SoibZ)("Xk1>+K+8t=$%nrNh9O8e4lJ,2Ccc&O([^pP4fLa5`2n#^o$QP7@K,CBaI2u)\A0EmUASb`a\!Han1OHfCiDT(85p%!J)YlfKg_Q@1(V8i5LDXN1_%$J`<WM;SlEQ^(,$W!GYL/P!enHM%TY>sNl9l(<G%n^"uKoZ,j<r7AFd0)Y7ghmUA$QFjQn9NVsU51lgaE>]<eOF)N_`b5C!GEtL\%?ptjD?97HhbAY3MBuNiLCk&59I&dIc,*BY+LM^'-.a`$CgqgGOrdJYiqUFl'<6NO0V-5%[5`2hLNJ5>%.04Z>fGog.`GF)K6FG!H%UfE$:ULLk$d?e+E;<cWBIQ\2C3^i@kK4*152#mffB!XZ:46ol;hc1VNPm[5B@+IZp@;%D1-lHbG(`r/0dNYoA.\f64MchGK(W!dn%Q.&Or)/@PU)p1l_r"/iV13MQ<:?<Q]4a!c1ZCG`s^gk(9>RM_2-L!jTD0'-=HNaPf7hu]p0%c,tL8b:30@[T+JV4J[YRS+%]f*GR%6r5WKmatY$UfrF[D*E*RGgj=q?E_%tUtacQb/.]r5ZsgJoIs/Y8l[;r,%Z'"ksc@iGPHGW--5u$$7;eef'C&`La;Q+XHq!%hDX1T%PT"4$9;N*IMata4[G.erZ$96*K\TuV44B#pg4oR)%'!,:ZSF681+Aq0;lC'-0If=j`r>OYpqQjo%t=Q5O.`lZ3I1GXIf&XG^AS=e%s7G]V+3$]Ha,stWK0q_Z?Jhf+\p_`V:N?*%OM(N0lTu<L,J(AnX8,QDD5bNue#.6;&\c"B>t=jTi4jh@nX#4Hnb;/EhEeJGomF83%(Am3?]`F01Mqr9_<pFh.*MbD<Wj^[$s*q'DK)0>\atL/KV-Rrb10f"nVte[<^/_"*A(-F__fs(CB,P57k^?\^mO7p;Z/4MPnUANV%*""3"N'Ym3r;%GQ:8?L@L-SGG=amDP_I/+b>km^[X&L;kA;DE*#/kLbm2h?a%.9b$oG7u:LmS_U0bLGc[:6+A%7Bmm8+h(_d?hQT%c0AF'[nP3%]eVScjgQb^IWKV@e1%,UNB.SP/1`g\`q][Dq&9IZIgfT9H2>M;?u>gGAqNjl<rQBk`M+Qr0k["<XF>Tr7BM/*qVVrt%"b4-.fK*AT5e"H<e"uM_gYJP.LLg[4k*Mc$n@.6l;2Qkr-98"`0@eeJ9,MqlQM`?/Maq1Q3`Kj;_'I[65'?,+>@G+os3BL%ohXZ*%BsZDD=3:8]^NKJc>3`R+_L&[pXFN;f.NI+RiL$^Npd5n`Z5(A@!c)#r(<&!aN^8iAa7bCMk?d\h3d0"hoid=*>jR`?3D[,A($8VU%BjPSO<K#=QBm-E0XLHH?.IXnc4)Z`p.b8C$`Lq+0WP*1jm%i:u<nk#hnS[5V&nW<0,ag/3$h.B5Q'*Rii3J80YHG.Zl`0?WUNRBi%d?_sh_F<>AfG]*PJEu"WFiU(f@Tl%E>,R4t*0-:<C'Yq98KnE[<U+aNCqn\L0tUC1@70@25l*smq8QjHgOf-Ohm%`s*GZBod)/WG%]iQjj73lrqZX_g7Z-d8#JJ?;b6dKK^./g3HP<H-TZ/$uhMs\Yh)37!m6RlO:f<<Dc"T@L/3j@gh]?7Zm@+dFK@*%SS1@8FHZiMkb%W""9.APE.uH@8`$O,@cs+W-UW:6bfVF\II8(H^%S/-uDWWmtn@n"'C?.!kD]/&*(3RnpG<Fgi8g1B1[\<nnuiMiJd2:O=B1IA>KZ%G#",_X;>\p/W;i\]Rnt>[_Jl'28?3#>8S7F"M[d9f33\_oG`8dBR9rJFS].\rW[=D^"0-BFiYP1aMQcu0>"ZqEe.gUg*U(2pg(;_%KeY+nlbu?HXi(M^+7VN1T[L)mV:I6Pa(H8EC!J6=jIpqS@<h<WLIE*`a`kh;G\Y9S@Z`#i7:egFSG#^apWaq*BPBZ05?;T"QlHHr%4S5I5KL0P)QO%Ka082e__D5I2YK]t8ck.GRftld-SPlTe?>Kc]V.J@5pahE_0&Nl@s1TDpolg6Re7`fXEjGd?dI"<0h+ho\PBfcF%N,Lu7FsZ!]j$4>"o%gY1'6)YuZi)DP[WRpO2*3Zc?$)&&>CDOHKIHFtT6tXFlBI5".^*Vq\aP.IfI=;pAP5GePUSOPh;EUj^s?79%H^/;.^V@b(C'+?>nSaDOlL6f"5Op"pBOK12nUR?!Na80<B$eMnZkpkUd7X'<7>&k\p?`:\KQkDE9Y&sf?n5-N"k'F%G\R^:L4UK-%pAh4iNM9#s(#+[Y13#G>fWW2g(X8kUGTD1,TjHsRY(\Fa[[bO&Dc!>`J7hFCpL=$%j6T'f_Hkp3$n?%F4@EmFe6Y!2eEFn&ojH`K%bI#u!bsmfU_dXW?3#HU+08ern?G<Jk")+P6Z5jZR@$*qO\VP%&!Xk:L<gmqecq]SY]'<am=E:KYhI6u;F^BrjC:bC7,qN$_U=mrp%fZ\p:XNam?nWN^_CrIEl:.k"j'M>dhb#7d\q<T`u;i^*0RqWX?NnSir-0qr=!<iXqX`Ar*+pC"."%`i!H:*"FXr;mdM0>`OEG?9H%;GXtq3FMc!).q`G)XrK='J23]c0iAF<)K&#&<]iOZDfGQQ9*>U#QSjNY7`),nu'/jZdZ%OqC;4(?"++?gHhK@Bi`GEDa;]N"XR3_%&K6='APep30kN^Ienqf8q"(j1TF>V#q3n&=ak]e=VUq*7D^g#Qe6D9)U"VRVmX[F>/84=<!9e)fS$iWROd<E@)BT%eau]=<_cCkf%`kTkc`6bNQA2WA^b$;p^bt9NUJgnO-8Yt.?4Z<RI7]*Xn@Za\I&4ZRr>^`^EdUVK_p%aX$Yt!2_d`6)3ie4)ss,#YOEW6(AApljY%%__i]oD28\]RGW_>Nf!!AdMP;@CWOKroc0ikd7QYm/:KYI<366R+4^=s%^ajG2R*)@6Jl3emK;#FMm4[rW"%tho/(:!SHEm5U'^C%c<ICSDK-o:/]M7:0GE33.Q6&l/r:LGfWBJicq^p#qi3ZsaGfu+Ji0Z>K,^ZiE00X@Ut0dkGIdcJcQ.6(-j<rZjo99gR0=>.Y[d)N%\7E5()Lu4>EN=+'/pj$=p,=JO7`UIgae$B$?Mpd.rTI[[RXsql(u&BtC(#nJfo+EBjnJ3qRN#(A]j%YK`M#ms6^:CV<B=]tfD*p@%Blg-JV7AU\C2JRcaend##ME8RZ5E/<XOU]XMr=tHF:raN\V`;^Q3NToL9SW\_H,aU@1e8>Csbu0aoK9o_\9I<$t5&]&[jY5@>dJb%[MYU?s"jRlm"KdNOLiCSW*:7!\u"oG/NKdlQt@W`FaF9e*$pB6DQ/].`<"I?%7f6;S%8ij%o(j-0Z5OP7GQ<f`%;EegerCVcIqno%AQu2F,]7<%ig,<CmUUS%:-+4nQt2C=iXW2`BZX\=46[r,0s1Wi9l`5I::b.$2*c10_\767(ue:#7GQ"YLc[U2E@8X;[ptV8P)a`?%OLUKA&9lPkgt_V\DS1s;RZG_[+$=Prhe0%V82hSHS,ar?#3['r:TULJVkiF.BpPRBDSCb@p5<P[mF*]u!Sj7a+W@KilTMuh/,j:W%?$kH^[bi^;TC%YN$R<X!lh)<eB`b3cSk]KSFOmCUS!E7e;+_>9&WJptg]^>N#/(#^mWRMN))%Dqq(L!_rsC6%;LM"?6BpP%mL8M%%?`ToA=m[MdH/\^6UKN%sTr?\2\Eqcb'e]K;JARZGjt@W0MdRJkJnh:,-Y\a8dgc6b>;c200#G>@_(DMFJ9Ns,`U=2BHM+X`?'J]1%)fgsc7;M//TN41;.S3t<3qh2'OX^PFM"BG2d-5p6/0YD"LW:YhrY\\H?OVico%n#Al$@UlCq<r\^^Y&).!E0<e^A`FqMPpFKu))E%[p"%@]pBYV>!7OHi6.d0&f0(cJLo%\>BE;5NJBX0S/8efnQFiee>uhk2bV-X?LdnBQ]88bpp33\X$?O>J,Rjbs8(XO6*PkuYs]hO%n=2ss%g"-A>]1?n9-X]%b7'W@U4MmZ>'NQgh$pNXC?JbFa<#GfF_JmJaHB()aRW6a8Y\2*E6/K6[0-%djt_scp"BBsO]P;i`C?]V%%OQ-mnuPb9C:@STWtSGg>P#A\-j./;K4s2K_p9KD)k;_%mA\*r'[MX3n>d3Kn'qOaQOnr=_?jMQo=`*c+^_V(^d),HL+IQX87H(`%08:bq-J["Zr59ug/k>SO'*LV%`TQPcrkf=kI<J^r[$FGq7>QB%ors^rrUfj!rV01'rV4^[D@:r<N1IVU)t;p,J,Ab3^A[\Ri,/rf%r@?YlieKbpp;9,ip;8!M`Lm1*?iS54r:\&.q!H-%qUbc.?iTu;K1CE+\%9?Qn;$f2pO8naJ,Sj9cF4npGg+S'%tF?rrllP`p&Fqs%3bnK(+1<+LR2CVZs5McDruC;MqcNd&Da45>\GZO1!It%>&&/#70>@D[0C=*i5_X^Xs8MhDpj7MOWpnaRs8La`s7k=Zs-KLY5Pusp%r9N8;Hf';I4+Hd5s34pM_uCL@j$!3J/;u7]pJ?hAkJt@7f0B2d?iF.,/+*AG++F7E&-(_F%tFW6&,ufT1,OWJgU3>9!8rXLIB&?K%VB`qt;6@j/;"ZZS]q%a\<GVXWVUc9UDrt+R<bI_VQO>msl,,r,UV6L&ZLlohh_E+e@PbPu1#A=]caNE8jO2'$k1Y9!I;/.nAq-T3%.k=(qg<W1+<,,;B3r5oV]HBmb/DnM22HCSsSW1ptP__^dQM8DR][0DTHepg?gK7$I:NNqo[B^j7cTLqZ[9'njp(Z>=/h,DA?2aFk%93j2'W:/!ENk0YmI@4H+-[UT>R_$jPlSB?>W;\(/PWUIc;R0*@q=2_3>0+\/r>W/2>IrQkGr+kHQ9+R1H$pji1Lci=Vb!$pbBO/u%d%B_Y'Wo)H^Kc*5?FmZ`j]Zc!j)J6UMgHNb/*eu-ZlT4XPIl=YDo,l1+8U.lHX'e!]M>H(Mj"SW_e$+$MaXnTZ2&FSS3Dtp?;_<W%.r$n$4g,kW4O.m+B$Q??[5YR<^,,Sj>V6iMn?:Pnrb:hT[O_cBU=-2=4YG:QG:HcZ\j!IQT"jZlH`,=7#lj82o$0l`&s\g0ml&Zb%H00O(FalEF]\fmC'ID.P8uh:L[Q+;q,apTVopsAgTM:iR.Mk[MZ;f!nMD2d(rb?7hTrQY.UNbFEX1d^dDL5sc,/946G@4[aDrf"t%-.ff%?TG=F/4l\[4&YHL,75GpPNO9488dJrq7)!#>1;>?j[DY-kES1r]UR^.'?-5N@sn9eNNL:si1AFbMF=1*Bjs.mrgmIQ<nLb0%(\q??4L^E%Um4MQdPd3TV(fZmQ=#aGp#f=Ucc,1lEoluPSrBHO0[t<FV-,<F8D>j"\?c/HA#gtZW1"q)dc6eq5Yqok\t5(gjk$eA%csPu/Vo8!n^0$nndcAj0EV:f,H);YFZm5P6[.^cpEOYQ[M/'#j_?36h[9U8f5D\po>3]!K2"]CXLKs4H:+SWC8"Ydre!p[L>^KG7%P=j;=06@![^8i=Cc0ZGGCh8smL*N/85)as"'gJ9s5;.K4%^!j@il6#44/!F5]"S*G\M.g:"!<?Bp,K8@'KG80f8W2if9PR+oXM30%$c_R'P*!K%j,0N4Fj)G]CX)4ZH`Wa)[1=f1#YI,C0:a0#'(j/'Vk(LqojL?9'XKRP>(/;;:V1UH==IKJZW$TK'G)WQjPEJ:C;cuR%ZagnJj=NU2(H3m;"U;JOU4bPO=-,a-J>qD'Tkfju\`]<,7p.I:SZ']=FQ"9nUTOC'U[Eu`r8L$llSTs@\*@i`&lf>:Q$JHFCKXrt%]6a(#QB\bAgUpFUJ8+S;+Dn"Lq^JFiABZ+FQOQ*+/^:J94t]=!<kk;/jX2:VV\Mp44?Otm-SB;-09AZr`+*RXHgOkj[<glGW>8em%VkAq'3O=<<I\D$0):OMdNI(0f1'=^#9S;boeUV"?'ube/A%%l*&.rfDOmr(bAp!Vs99E6,H[a'NVJ#T]De"+K;6KPG@e<e%&2%l$%_T+)uVZ?1Tch0p/k%:AOH.fT92Am-hV2_3d>RER+Cqfi@1!Pf&1.Od1mo,=iFeecnq7M-gFeBMGP;j][@P3!aX^1$0ht.BS[(G'u%2'2&QY'SfkWoZm-Hji&]EMr8CO.Vk:':b5tHc@*@g*NaFBpXFrl0S?E`VdDinha8\b;Z^Z)-Z$UIQSs`3U(O2;3`3cP+)%45-lEs%>OQA"VfAW+P'c1TCi9J\Bs*dtdi[Da?FmhG*\,<SV3k3mZ5PjOA]<*hc&/;uk#D2OIb\(moQPjM,s3H=(Z3i`o#?ndC6T*1+6VnV%p`;CAf5Cg=/Y=(QU<6@/j]!k6^R[sljR/<j>?N\Vr4$nt\(Zg]C%biePifup[ZWGkSU5AJ\[*aO0"h=nKq0aQq7V&"]Z`#kMt(>]%P0>Lo(8Uk5T"ZB7>]$*r=s?hBBBp]YS(p#fN9omSmD0(\JQ@dQ'R>)*//K'D:.]epW!c('k=E_!<XR"t"<@V6[$CR3(A)]dKfpa4%)T'?G4?22PHhnWDg"-j&I_$Omn#+oeqo:BCLb*R6DB:a^'Y/Yl-tei$qo[#UV^uIa\#2jpIH$c)()ki:#9!4(-n]nkk[(1j0K5;o%@WVQSRb(M(d,!!XpZM]U8,#hUG"6ciDq;m"EV<Pf4*eCKp28$.!5*D`+/,cX67S`>b\g,5W1CY*@g*]J%goqsj2'P;13`A0a[^j:%&?@UT![upVL,=6$k[HP9%Y.kK:E^)[;BPFt$?BXM$"cp[-Eiu:%b,<hT!:"TGAm@tUYUpcJpo0C-8VUCVhL[9;.9#>qf&MTh[3<Y%p9sl"B&8AQ4Nri#TI?2VT,2.lWM3m[QO<D0VoZ*-".=Q3>i,(W65QONFlS\uo/=Kfe/kXT8RjZFX0gJrNI9l!bNb1pI(a/X.k,.C%ks3a6@*>.F3a*+B2pQ&FS,)l4An>cKA9HSu<3+W/WdJf-\"rJoN_d2Z>Ge'2(P%Yhp9+o[o3eL35$U7Y$Xp10XB4TU-OrMu=[DlE%85!5ZbM4.CP@a4dhW".MV54t3FgJ@#DSM^<QM)u_M(Of\f@odCD#q#a9PXVY>Fo3h`=0F4!^3BHi+#]aEJpXBr1n>MFJW^.QkW0(%7U:[YoEa<P<Ucs*-;bX<2Hpike5GE,m?*E[V-j'M1O0JC,[T.Om,,%u09"'[p2=(!2\J"8haObldj5M<lT/Ac<p'$h]=f=dO&hUl%Z#\i<lW2onj;B)%fb,HT6!E09+_4BM$elL$)eComd!A==V#VHo,=^j/d5T&FQdnI-qDR6*<A5GR=,9<]SsD!tDEuUn>Med)T5q>7%9a2hLX6!Z*EjGc)raUGcrq>"9`!\K8X!]O/f&>$H6?;q\ig;lG:(,3KYB2&Vm?Uou\/$At^02<'QQOUcb6^ttgpT6>]djY+/T"-R%oe\s>39uqYqct2]jlTmo0(1E]%npG&+/:MkKjf:#g!&SB+/5F$^V>+Q!S%-)DGo$u\tOoEl"9&-=NRbTV2_hO/9M.4V@khgZ(=qF%[L1JZoRU`1BBo$\(/a<!gZ_Jn7.^(Y$HcGZ*/Rj9F-;bFW96'V2P:o]GB8s;^<q:lU=o:"<Hgn]n*Of/7iOtHm+(t6o073tNXnn2%$-A;7`34P_dQs07Q^YI%]m^:;EP/4cEbB%\ioBY.I/a%aMp)"BmcJZOZ"_."2etDB42Obl,DXVk/a3[YEqNVj3j%:Z4'@`sBt]b2%SpF7-G&cn`_s+kg.gsJ4%Qc\4J"[fcMu$1qmVsrTg&U[6Ordr>QXm.:;le*f2\r/k&W<J+BeebMf$:se2^\a#1tn,p.<3eXcd0^/%QASj^4_XR/k>U1h-,.pc_M=^:OpUD66'23k-D#/Z3qfW-E\B.5n3kfS@U]Lche@>2%=LO6?P50T#KH,\;:htU/h.0scke`E([=S#%r\jd)\%;@dX1]u4Z)R0or'E:7oZbT<d*kqJY.IiYq0`!_FqoWE7<k`;,UA^PVfcK1EBrr+outX]Xa+oq;usaR2@2d_;:'MJ`s\$n%o$^Y(H"6(_EM40?k;cPQH_.X5.TE+_/$Y*-@^ZN]7f<CH*.c-d1Zndd!fW:*W9&4&'YN4\-[g3J+@`*Zi_m0qRQ!"0,RW"!VoHX8%oK<VXRdP*9Vl.R2.Z56=#Hr&(onHs&:Df'2MiY,i+>"Bo:7(Q;BZE8![l#&2*\B9ON^RrapFQ88`XbO]p,VmFr*3-`h=2`*4",^[%Y0h8tO-,U)lq51)&1s(%]RKK$P1AiSnH<#8kNGR:dDJXFGOlJO._YJjGi+Z<rD\Gig\Gk!R:[aP8mJhfBEO2b+P`6-5sA0WQh%a-%b?E)$*HM*&jq_PfQLE+ZTX)OKrto9V5UT(r)_:LSc15Hn=YPhC2Mdci<m3c\51`*Bm)JYk`R?()jN1.abj%PF)CIq>8[k$>8AJD8%QS1:=#J"p'ZFh'W5"FL\/@#p3P>gd4Yf`71oQ2X0i%qpKZ8g]-]mog#NY489,aMZ8=t%,!D#t4jXia4n9$DgPMa2f"cI^r3<n:H#%,RP`33Kq31Q`b2P9(M$Gn5/e'6g4poS*J1Gar$b!]C@G8H!.l*M.c:Jq:2$Ob<3DY^8^p[WannU`]tP]^8ed]g:jTp+I:+g*;FsL%rGX>/Y,BLfF4Tmf(u&2Y1."%8!\3bSl&?5&f&F^FmUZi<aR_!FC%<939K@G7CEN#\B$]KV+7&$gUX>L$ROPY9/RG3I?VoJRZ-6f:%5F8aNIs![f't/$==4l8>4HdXR%tsesg@XWEHY)/NAKgqk45&&+GFm["<c:p"MdB4]*li$\dEUCIHJ0nAR&MDS$i+gg:"8I3PrEbL%1[8\&,G?/jT/4%Vp^O0ufL)[2p9,9o2&D'"`Ca&_qG%4rj.JK?Z*O4,!:!q;aAWb/B_M+oG_/!L&KR>jM.,MXe(`oqg;g:@Gd_1^%-dC0H28-\.+q]7H!K9Du,ckhH&),1m<4!(2TeJ&o9pUr3:;)!4EpLoSN>K,C,hi_YX8iCb*fQ^84D/$U1RHt#@%dc6I'4HJ1CkOr%;3fVp*W8RSK-g'[YhG/>aYu)jFgnIo9pH7^]@tf2="F/&oec?Gku5QC=$<+umAQ#H\IW2h.!NOI.[%L0nHBQ>)8)c=f(-fVq3(B[%\"`?J'p;%fGq@YWB@V3b%Se`WjF4!.=put21U&KlH]*l;K'B\Fc2f_C(A7(^b:.NZl?[U7IR62h9:TLBFV9ZZ1#6"qe#bQFm`b[]%XJ",0/Rejr"2@rm,=>-;rR8)eIJ^]Y6:5Y1DU>[-AbnZo(TV/C!moS+='mrbW,R7MND^)Eb#djZn5cFXjU(_mG[nDRN-EY=;a.Wb%p;g4So$dL.2#*lMZFYC*g@3SWq\Xn1k2RSVj'E)CZk\l[o(.Vmo3,G1?OSEn[Vt5uG,M!E,Aso*V_POFMiF"51$adu\;K(Gq)WJd%qe:&VMaU`][$]`7YdZr%BtDor'!G!]!FOOr]-'Q!A!s2pO6>i_lg)rQ^0Nbel8u8<JK2A:EF.9Mi`Hd2S$U$8nWAU6HPTiQaU/SM%C&plnTkrf4n"O+/me"(C+`$Pi;Pd8D/03N4HH,!YoF;.5:R^m:fBR(LogAm=dVAI!0):=5h("rU%eS%(C'ZE_hRhGF,(6'd-`p>M%O72B#j8^5i+'`?F0D?e7eBDBL!cTnF]*N7bZeb]+^/ZZRq:XSL7Tn&SJTkFg+@af!b&QtnbfZ1W1@=4cQKF+K7WCJMG"j!5l?HWs%(-]m1;<.K^K]c9,4fP>49TYR"fQQe*UGI6W!W")K$o"ZgS.tK3M,IBJFoc\PrXcC?OfS',a4u\]c5#7/\QY`?Zp11q;%&(le"c$a%a:r'[oX]0i)b8MBW)@l1Ch)[BDI`KKGa(FG:+c4O&^T)RPL@kNr2Q3h!%JBAL&RURHNQn.DV.:*[)h4M?%,XO0K;'O5ntSI*#)n.%qnV+^?>sq3"p63]@,G<cC2`smX(CEQCMX(K[h_8^NORSW1c&ZUV;Rg0(-ksHc#2q\\&eN\\hq*:_d2N4H3.?W[^B7_R+jL9P6Apm%i;9nD@DJ=)b1Zak.JH5kXoVN=kZQCO`PUb[VJq:,mLa6Y]/>Bdk0:a,YYH7[\k!5[o%?kd!DIaH5V-^7M[:('1Lh&1OOj*&RIt:0%`5df8F=J(c)S+mVrU)PG\I)sZ_3?`ec*_G"eul-dXhkoPP]pKA@s(Dp;OrQD.#!sgUtan&48hb:p5%sN+8t6S8[*iTN-_uqGC`C#%C-Xs=h7gU*]X[U0[:e!dq@p7LRT7]4DVi`5f9-MPZ\$WFo'Tp&#]8Nuh\gnV^u)VV]8sd]hD]%s"1L0ELYMV]n%V$J%8pit)4](!%gsX%1E\5&Q]G<(:l"h5^:J3#Z;;t$K&1ZPMJ'-(S)gc&5'sM%JkijB<<Z$lH(U_*p@0TO2McY)[J:ED<O>#VZU7,n"G[CTQ][>3#%-Z>nrAK\j6?pMma:#7;=m6+ILZLWH/ohI)hh2@d-Oso&0*+"]P$;V1jqhb:+O#1%\4/kuTH"l@-jq^MG#U:Vk@ul;'U1-.i^-asY%0V@6pcfXERZrc2.<Y+Qag%55kbtMZ10R\B9O=VsJN9Ojh>-cjY8m;+=\k6*5Y@H.807/S:j?@)>[977mQebk4f^#pe\'^O*A"A23%4>dA1X4#I=E$k_d/4,Z-g@'8=L72IBlYicq_oFX.14?`"I]d7kVI$A08M-.MJA(]+]s@EH1s&?,gM:"(eQf`"G#Hd1%h^6/M>#!N%7\Vu.1C@p^Q2F'gi\D-@CoOfedC@u%J6'UCOBB2b"*;)D9TS@KO&I'uZTi8QX!Mn^Fg/3WS*d:g[T5$?^m*+0e9ScVHS+I5``9iW%<EI?ffK9Vo8oj3A5.<Lq!q#BKNF,9`M>@*[o.MQ#EkDPGrBu*k-hjoFrC-Fq:hmJ+3sB;.@9Z9u:1L(=(1`tpd63iaRr?cOVqCR6%<GhV.kc@&*RGRkqk4l=6nT^dlfh>s@Q4`STF^UQYoTa;OMiHT%n+L[\]c5d,maFh`pMnMKn#$Zh]Gcbt8[EGSG;Dj[m;$fT4P&qV%dC+7o8)eB#6<]iLC:#e'YeN^I72g7A2>n.<c<TJE)bnT6cEBdbhE@D`mSf<^XnnWi;.p-&'b"r'_["$KjA_m;]B[l/e\,?Q*LqF7%\iIJ[/ab_8aLLm8<S6)i$GN8b?*=ta8Y\P/V7^kC0A<nK[68>JenPn&@A=aQ9&A(:=_KYBlm&>i6">lqc-3[99rHkj>(2Gp[-q<>%fGA2,][;_5X;Fm1B;>4eO!fC9DG;EebI=WDYn]`#GFcjBlA9_[a19m2O/_k:Y=@]AlUu"WNM^(Feuq"B,>mpDVQR'),:aaY2EG8/%.oRhad\0a;JoQ!I\/Jr,P)rT6Xg+MiCU>L+/j,_P2nCH:1Y%k5jb_j^jMErs-#N?j1$1glqE\k]+ZOuKAiL^B?4lmq71gK0lYCUC%g6>BjM\7kHZq-s"N*C_d]=BQj1b)9ND\_<hY>JTXT=`9m2nJsm"Qn?Pqr#D-f%0'Lnk@K@dG=)%;XeDmAl1O9R%:H",tiR/Ap:_a%#<18@1!`>8B,]+1NLmj(5F23ch#p>6hefK?pN8,,4Ynus<kTGhm7d:5HN(-/dBskr)KR`^-sWkBlJ@NgYN6koO72L!)ne=\g\,J@%&q.Gc<t(_8hI_GQ:4:O%d=^'%qdDCHoPF/.Ha.!:$KL,^[N.N%+89LAl:f:NhKM($boA90N,RK'k+U2!%p,O!Oa@V]")G?0S96R2%m.F\)N\i61XMqW<4l$bmkE](`FMZKU<;QGWKK_6(g;`B*-a.]^e#TRtmeXSsVrP8*Rp"IDFsV#fFm;<*F1*ueNQ,7`7\V#j[MO3r%F59#W\2>GY7b>W87@,E-BVc3;VFaN7j`[2S::8iq;?IjQON*f=D6)26Vr+%b[jk1g/hp),^2t?=Tm*56I4S3c=tMqZ0'a^pFZ+[*%>k329SmEFqn)o-q?\GQ%B[?E%#[VqJ8cJ_Pnt_cf+#mf%[uC2uj(75upSi2?]l\$QmA&a$1jANSqf_+uGX(6c<0a>ab?dsN`oP7T%q8U#,qt=@\n7gSMl/>%@[,pm9ZSfG(En91dH^acO]&#W?Y;$,YGS2BigeUR)V[_O]kPG*\gNqS/Z&<9E1%+r4`N?k]lML3.HEU"f%4_5IWm2i[DI,BB7QaC8[VseQDg:cBB5h5CFg;I+no,T9fG3Sn2gaJ`]q)t8iTAI;Qo>fL*?JR87IG`nDegEl#Vs:cK27qq-Z1O?D%?_-5j?A^>H\8o<&gf\8cF7C!se&(/-S8*PB=u^MJ=?3aPB5V``_E:<Rpq0%kNfYq9dT!_ic-?@gb9j3amM(c)>Aeh.-[R_bnFBbu%O#YuP`Y\92*.D-(s3/oVqpPZhem@l7j0GdM+jI)0/M`.lSr?CPX\C.)8U'"tDkJIfj+kR%VD/1%l=CJh^6OOhB^ofUCi;(+>:n*O%"IdE@H]R\cLHr7+8j!u`7cd56A8^bBV:@,s`,"7"5u#"L^5Wb$`iDtV0<!IE?@Bd^/+uG2Vc1#n1C)X5XjP;`oVC"cZ0lJ;A^Z9?%[-qpXURQBrUU+%9N<4E--*Kd4Nt:T(Z`cq:K$h<IpM'9bcG-7j7OR<%/Y.;9p:YC>B]$RL2nCacpM)Mtjj!5<p`c)-%DIgrbtrA<%Bf4)'-\&DK#D4FK?$Qr58^#rahAZR?acdh@q9).;K^gLZIUR?=jFmed^/a?5OWB@"+(ObqSJ,35B$KPIM/XVh.OL@](DF3uV$60p%XVIlNQog=+$'DgMRU'Wq29&/j<ig'g]6U0(fIH$gjWom:fDo$s8(kr"IZlWSChqmX"V#Qj[7-"`U.ZX$[)>U;O.%.<gj>kU0oLo0%R`0DcA^fMla.7>_o%=WQSAp(FDiS=_g>u!JS+'o<8(0@1\hGf(Un^fXJL#Lq#c+rr[MMJs-j/b.2Zokf^ECe&$arTo/)WpZ0&?3-%>mooR.)ui&HE'Q=EH_r@;]cOt5OpOJr(\U`dD7%eC%fk/TLjtIN70T?n\]$9\.Q[LCUtp9+L5*LBO173-I->/`h:Jk&Gu$mWV8o[%XNfL\@(]"H@igSulVDP]PP5)\P'3DPq'<89U1`$i4\Y;H4SO-acmCt=)Yr.T[N0oq+-6+T89^L.+!9:ok=tUF5dQPZTH=Sd@`+6W%Y83[6Bc#O\>Y-,WSmAsKEMYZ6_fRK@IU:Y;7Pos*mnU4b!`)Ybq(TL^*lY&1kk>[9T!WOp*4\H#b[&q1YYF63--YE91k9eLq[Cq?%9.Wi_C^m+(+1,E+$o*>e@M1?=q,L0O-7+kKNAlkd=&ik603i'`^74Fiq*i2ZlU]NO=M?:\>kS4hE`-.%',U/uB&58cdmk5t).WJJ%hZ;iVM'"FA<hR!q2Mq^Gif\oeapsJ,TPT]U?b2_uE33uC3aS?[8quLJ6FD0+kd/,-L1J#J81L+C3\D'<'gCJ2rKc^C)?dbiUT#aa%isXG^9fGm'\]<<?F>jdV>>>RWV3jSR:R+YPS9Cs0#UNbLnHK!D?/P/Ql0s?lirbH-G!U]M2sJP[$T3Cd.@8<:B35;kr/U;_"<2H)%r%S'q`!C6%]oPJg2N<Z\SMn3>Z5i._b-;O.]*`^jL;VXD]5BTe4g_s4@s3_&$&l:YK_D@Oq]+5URTg'N[Fd1an^]Csi/*L7dk5"I%_`B^4>hNDTpbK#%/jH4"36Kb55FK"*\9_Oq?/46DM]FHa,#LqDR[>-.4)5j8/c3\$bGObe%CZNLK`Q^3.f`1d(XF1b!%AJ9L;f"u%[N#bgC0bWbAp]kW3:EV"T=6LrIH)Ldb89d@%I(g+Eu>Rj;7c(XijNear3_LuT+?mB\/V*a!W$a?Q=-)QL.un8Ha#Lok?)U8_d`t%%fH6p262l=H!H?YM%Z%IDBIm6cC_%`jh#2<hqp<6KiK<PfEegLLWF&n0lY"DUDW@PL7>Uq3U'!n^mu$qQc=Zir7__aE4?fG;QfOJV%X,k([@i(i#jh]rj`'>a(JLi1,-`=7g#q(Z"\67V98TR:dHm0h$[1f=T&pC@<X>OYLKI=-*n\4%jhgH^pNhEI\f4IM:)O:4^\FO$W%TKaD1hH1S<H;:l<FR%#"!=f/dd(tM0aUZuPH)FH=INn4ONn`,Y>e/5@Tu@3[Al,ST,mqG[pU2Xc4)tVnfL198dblsY2gTS*U>;1@%3X?Bm*,J79>,JYK^P'DYdW%)\)G:P1\>>fA9Wk!:1P7,cJ/Y6]ZKkPETBb.3Dq?2\OA]f%cVYa8c7MY+mCG14V`H[&<-c3_^-D_'%IMPWg0*!!X`u&8,ggU%Tfs6,I;pbbHE]@8=-`^kGX#I7aE,X=hnU6_lEWAfr9Z3EII,;QN4EXFcISSW0CE+i$Wd$$pe^&QZb%,%O%&<de\8p.<&j5]:&oYOKgWPrm&q<Eu9f&OSt?F<T;2P?WRAh'lc^u$5;oD)GLS0.C2/jdf^!!c7P`16O5N\!TkjW$0/)D^`G,Ki`8%=#Z_",uuA3LRdDr7HJ<-%c]6,aRkn_%[:Xt\(Ns%ep3aG%+*g=,oRn<j(#m7%(>:NcUO%1Xp@-hp14m(b`ZY3\!/R!*EJm<nii#e%(J$A<qTdI?BBokiBT_fWN'?u.l3Wgg>0pa@4ANbWF.<?pnt=)eZ>EL\2Ke5#V6GY[HkdiM4FOJS]]Yf8rUcO/S-0?KK[;JACY[ZT%blOFY#"ut_65F5cIsX@CZ;o60\si,\HO]3r?ClYpQZeAsNgjfedq==8f&ACMm1I=rl3U\siMsk8V$a3"hkg;\1eY+>^_tuoPMBGH%:a!qsrE,.>K`96.[3==0%-F'NG\pQQ3:U5t0U0V%H1<cc4ful+$[l_?N&J<SlWQfQ5pULJ0t_ql-gtHm,14fG+k@=.$c?[5;GTj\%5"LToH:G@3YneuuB_qVDBuA\d+?&T8Kf!fbW!sjFB8Z690T,pN>^Ws<;Cpli/8H,XGONX'[>/q@OP!Fp@ggq7kgGBuSN_(=m_0[`%d^<^NHWLu7]*F41L9XQ+51mE!Oc4X,\_eko+1haHH(G:3&VD=A"K7CriQYV&[=kU1Eq.+4`KZ;XK05B^->AfkaGca#$F=ct$((ZC%!.'#[YSUGnno_!MZ*M3P2dtidYc:5N3OQN3pB<sTM^tL\aaS:5cEVa&A*MIBI!t(V^r<bmM?jBKjI-`(EoAN[>YC]kV=tq#SqY;`%,[[_G4MKH-IMcEO^X%roWl]V3SBH]4TehJQ1P:_S7.CF@FMSi:R)/_93HT\/3\ootZlD5a/i\InZN\)fLQ:qo?NqPB/4RpY$dPDT%fn(I3d!7NaB$bg7$[sFX/i\KDAIFNg6Pl7YBB?jeQ9uIY6&0LI.rsk/,0IG;g3^PSp`-ko<G#Tu9Hka2R6X7u`ZPfGm^)`P!F[Lp%Md7;f"b7;oIO`3._b_4L7ON0&PCJD14d2hVmGEJ>o!<d`FA(6W[0iPEP:OT$^V$+H.5EjlDgBVoYTE,S<_K^U<%p)JLM;":eaou<%-a.YpDZ;".*@riReN_gd97O7:1NMT4oYDXr>VdUs5ro*^:uj)3.,Ug\?H(ie3C75.#r_6Y=$:ZTO*KXlh6;f'JsV)a#*%H$h@O,U%r:!?F4E<lo(+2UIG4SfBq71%F@?uN?js2Rd7L<(_q.YZcRst^^pb)fU\KR(H^/<`G6S"s.drMT8GSL&<CeE-r+?C#\PDdHMDQieR%QBIgI.!\4#W$KjO`4e>!0K=#@7c2P$#@n"^AVUP]nZX1gaD5^^Q7GW1DkDGT3Xj[f^t7okPR$?n!qS:\5*<n;)l/UNaQ"cSkJ'\O%Jl_lMBbLM_i'V<Ni;i+RdLW,_>E2^^KVecci.kE':t]q[0KmXrd,W`d,+-*QjUd[dnhK]GDqf5r%8)`hK$-/)MNnWk1r=Ib$EnmZ%`e)Z-LW%i<XUk\Eb`t>d?!]*DQTB!ZB$Z.<AU/.p7X[WZ];LZ"cB^81U)6_GgVa(/*i42q59@L_gU;!IlcYg3k:L=Sf5%Q/e(O>p%@ZYiuX2$#iT!s;18$S-I&;bGqS<:W4oH8h[Gl2e.;r#4o)>s!gjhgihQ2]taPT&jF-f\Y,6\bm:\K`"(Y`sX:6``g[Ng8HA`m+/%%oPrhQLlr"=*sJR_3M[.mPWVZ2l)rM.e`T<QA)#Y&0B2cYD&:6>fjj"1'Jd>]1:6r0-Y):@ibM*#EXL(Hl>T"6J0]gKagQ4L-j+=b%LeM32?0[@;1beAU#Uj=R-Jfi,H/J.OaS=,L:IJgXP7\\1KFrF+^*Y%fS6CeGLP];iLreq1`<mff,5)0hK:>C",O_N5@m2jr'+'kW%2KD1iB</?\WNSQ\5]TV,c?moI(JN7uZ<YHs-!V\,nkdpG?,:5+mgdK-%5O7:4&I9TcfQTF,_jmQ=%LBB;C/-j!_Oe=lDPTK$.-c?%[ADNs>pJL7NV>Y'TpS%++'l05'H*EB2tF[kX^,1S1W6S%^L8#k?EG#YocPGjPgiRBQa@\K"<Ek7k?b*2A=H(H.2hRaSp^<D52>Z)%omJ//c?Co*9Cq,HPu3`B#Ns!Ybd/-@+3r*:E+Hn83d\dm+)]/Ye5,5EH"RM6F["SgC&&M>E2M1[q,E=bq/E&%+W2^Nc=:*cX)hX=%&*M`AS`^KB4KZNlfLF2g8+dX@Ela]Op'Y#4AYZDbZm>Zs1Xql75oF$$05UC/=9Y)n\c)aFT?9VNodl&:2Wn>g)$9BI#M8PnR9[7f%@JCS`hOXmFY4E0[%D1U;/[%/N'2j0n^d*Q`_fK/qg:7=9^g*a4cI$r+'X=sI>+0ih,"stb23-<!j"1bF`cGLm)_fMPe-@7.Kjc(%%`LhQFn(j,4ei+!JNQm(""`F]0eB2^]QGD@(%h>k`bj7ZG$k$"[*"KAH^0%nQ<#GWCNPHYs2Y>S;5oHZ@M$M?`dSFDL(+2_G!JB>d%;D5a2,PCcj.l(#-QESA#`I+qoa@O9r7aFWE>21!pIbR*ucJQ4so<0/B(/S0E>\<&-_aP(o]F9g9KjS[Y8h-?t(Amr-38\`OdSr2A%+8@OMqe&jd]J9-1WGj$Zaq7S2,,'Q+,o*S$7DpQPiIVM+>Aj+6d,`>g42U/c$RFL`,K&]pH+HGI)4O/R`1.9;(2Ba"^GUS&?(.Im%Oi!<*N&e<`p7Ftr4Lm^TfY[!Y2Tb)3IFLW`'/YCV?9-Bg[''9!qAsehW]^FU6I1Tpn6SK!`djWeIe^3O5;,4aPEfJ2aA-U-)hk\p%4?JOM?+D0"K'V%ap4g.)(Nsh&]U[/ZM-W5si3^Ig;7,bO_6TGl1E.hemqcS5`rG,.bjj,D1SX),G$?R@mb>Y*[RS_!F4$9CVI-X`%AO(uUB>USmljVlGFt78*)0XEFg4%GQdDs$2]?S<rX\nh<AkV_9ZVbqP>O(cjcTIQ@ScD7+j,4'e]8:Ob7d!j=hu,=sjN5LS\TdA/%@<Zi-P]ugBP[W/p'YG@GkOIq>?RgLBG1E6j_W+;h7e6jDRl4WtNSpd*Er!PTdGmDg!d8/"PJ7s*06rMjGKJrC25Y9cK$.RQ/DouR%Q=R"::\HJ23TD$k\m(^0mA77">AY="g].(=h_P#&l"9FRNC`7qRS]K`gS-#\k?*-8!u2_"kB?7qf3Ac5P+7m396K>tSg<Kq&Eu=J%J5+Y5ilQD$jDaEnoFNC13"4$HF5K0,Ln%OHKJX]-b\-0Ji*djD_t<]M';tqE%0V5me,0!GM^\`nE^c!Yi0V^RJ7FD:`NJnCLp+pt%o7G=PRkT.HSQ@FLhjGo<B@D,0]_GX"?^FLMPtMp.kK0F'l29]p^G;;(:Ki3a2Vgo$ld4=,?I"<2-'+Efk:dNN/tJ4#^ET/m/!nOS%_MjdTkN+Wm^-%n1/!nPOHi:6d3bB3iEp<@6gTSeto?*o9i\4`):$4CF,\m:SflZ)WU0jHck64c%#1(n3ds6qFkK_'lA^bqddKNiI%T?3u%W[]c7AV7>R6I,(\QqcbH$7YtT0G\I<%Z.G%flZ1-2G,lu="YMaIJ_0'3j2dLn!!<3aen[0TKd("e8./b>0PY4^RUG4B@D.Z%c4Tf*A0Ya9H0*H`3*5_cflUOF'X1+%-aW((h;u1hiVZ;TFG*?&nXk+,Cc7hcLYR71&!]lP"=_+e%*1t^3e/8-Y-6Sg[r*,B-#F/R%VD;C/(1?L3o.c'SmH>X6?CeQJn^ZgQKg%G(i-BHRF4Rqo1X:-IT>d#N%5od6GLQpYb0??I0J#cMjpuN4?.eeprZc+T1PH(lBqPXf%g>sjc.0$+X_h!L=&fgrD&t)LUBO0EX\3f<!WGKbSp\WPaKaEA@F3L2i9]#TNNPXLrg_fq\HGmU/mR"rH7QT\WjHlNlmR!g#q&ON8%h"p*X*cpMu-,BDN]A^VE*lm%F5&%lHRDMe@gi6U;GgN".nn@MIG@C6"C[I-%R7j]TM,C1"q=Fa,h%5uCOcW%VCNl"cpl(B0F/uVl%-dqgn4<.h42+aV@>Z-\7M_dD7#4/ME&rtqWddV(aV:bG``cWgVo/e03YS/Jm-<r_HTs;]WG=E0^RMric2Um-#k0^fqJ,*W,fRVN1%6`c#ob!N4!%^d2^.LWSW4*Z06OaLN!q)I^YP9u:"lPV^\QINcNT"hW@=c`S,WhI^0r/-+Rq)O:=RTOq%?8Osn9fR!;eZOF)Q%seN%O^AtQirl"a,KuZ*:&(mH.tg<eh3%=`+frc8ls.:qO1BM-h]'A%rU^8].IMVF4n_k]S]Uqtm0.,k$upkB4?<g(8Nc2>5LY''/b:]5%,"(i;6Wh[5VrhG??a36(4\dWNLppE_&$EspL;P!'f7-P)?n0(@M%&uloUTfCr\\NU3oTMuq3AjfE5u/PB>ZA_iJu2dpn)Ob$lf&8%E&V=ij!XGT4AO$<SIPHk\/XD&]HM[e^m"?efl5"Gmc`n"r]>fEW6CeqiH)llTN*oo'5K7QQT'V`A%*PTQoTT*DdSf4Hi)bc"lPTB%YD#.d4ZN%QrsSDGTpGK;CT^2k"+7%<fQp#-T=D8p>?p4@Jp<[\G'[D"cl0m^o@oU@$[lj$'Q[n6H`ZN@`J0^H,r'[7iLCcopV+XX%kThMH"N.('s7'Ja9fHK\mV#?;`klV1Ng5=W9)lDt'4["5>K;Hg.kef;0a/jX4g]Y1/88\**7rBmPF+mY[D-G>Z!APFPoA()oK/*e%(E\'r*ChEIqt>.mY#i=n2PrVQ50*>2poUOnpURm3Rc>Ib8U4[-j-klRHm`kWdD!d$Ea8L-@>*P9Ujin!"R6ATHXm^2*/6T[qr3;4%DYde]gX^+*IhQm,@cp(MXR;VDlgq$.e`Po)%"E+8dG2IZ>GECeXA.nXnW:Ph*Fo"c7iL7#qMDm_7m:0jo).do*ia7P_mYfA\T6fL%g%(=(e*u))a!K-B;8Eh+r%e<5aXQ=^p<N*>3YSr>r=]YgN)nBAdETf!1KU>>o(-qT[S-.'^N8%>"&dU.df0&]SJc"MD-LeHFCdJX%`n#(n5,i8&JLA_Xh3ib'KrU!fh3B4W7cha*l9KjkbD1EMBQS;fG4:FeTY'7+CS+'P>E73*GG?Og7d7JlPC@`%r>X#EcOB!8:>sY*%o.QD]fpc2?\B7[-op8A7KFg!JO)ms/LiS$NV.MZ)WCc=H<Q`!i_47[u:n>,spW9j"=NH2[JCO4mF#HQ"]507@.;#WsWD.dQ&s)B$%C@gaY0!4[L.He7Ec*h[df[QeDn8$.ZD4&%fDRcNCSlnsif0c]o*.Xs9!=R8kB;L;a=qrqGD87(70_E;aZ;5`T=OT>[lRq6J/acaE%!7ePRCNtq3(?]d\W-)90+F-J65J]"tJ5ob])NU(/>iI5_]/Jgd=8@tgbfkEf]!k%#(_4V;o9ITgTD`l>3++1oQi$(n@D3ksI%Rn7%r(kARL>"?,5<bD5MCIlg4GbTomQhO:A$ZnZ'A>t_`-g-OnY0PWUf/7Fd>3.$Q(;@X-/1[(?g&^NNT#N+IW9g1\-oOIL'e%tNW(p;%YWE@U@k+I=^0MQ31@;oUQ\J6\]+!ETD"&JXN`<e[G+7[YHEC/GC_"[-&"C\**Oi<X_sDI&TA:9i1MR22g]<Z>@f6jpJG/1T@.\=$%Mc)R+F,FLokL6D\K+GYi<S:-8$*#QO>iUBS=W+2@=oZU`TC$1HI-!na%EdcM#%IaI/r.?sJ=4TS3k:Tgou1$?]!/@o44K+52Z<3'%/ASJMJ.A_%3X`/6#4ENsLG_8;(1=r%F1?I8W%>`g3Ih3-@/$^2W"\hd=$q\e!XtP#ke0c1fIXhBq"3""iNiO%joC/*OTVlh_r^q/%R!f@f!o0Hqo_6LV-m)`ikX[i2%33MLOHKiZD1t'9DpV5n?ZRV;Pq^t-iC!EGk9^(]%d!:B+8Lg*jVoNRp\@2Pgj?%!Ae*pDBX-II%TmWGt;HQ''!Oae8B(4YR_k$*Pgtkl"4kJ"4UA@[Yqt/`AY&jPn(G?9>H4GA+?XVJpUT[VMq3o!j6CmF$E,V[.3S,qZ<50UI.n@[7%nAn3!e@C$7#.o#XTBd2t03C'tFfO>31:`-HXluD!2;G`k_5I-hI"!A'f5J%+A_;)&K!Xl9.pm7u?grC?E%=lmTBd:O^N-]&r>ba^%QSIMlae(QEcV!!a;KP4ufJ)Lb"coHd<n\@d]<bH76H&[eSa.)nmD?#X*d"Plq"+8Mc?].IeaHH"nI;Vk][,UWK`eG\/D2%'@l;38%IY4KY=.JRmS=W%ln=uWA(VH]^IZfgI_RY,DW-"Qp(H=%UR@6G)q?<MVkFF=ar4.9mk2;o6['*'iA@h?TnfGG>oc'@oIEqKn2?Q(f%j86d*INGmJ$l]*'ch.[KA\`S=U!NB>51M;oNc2G?LMG28IRK3E_7>$2VtriV_m#j7\UHnXV0uL4[Ja(>Y]=R,\UL;Vj'g:,$ZdBH%ki_dGTB\AjH$l5q+8:&.T0:fP=c7Wr5OZg\iQq2g$Dn9?UJ@b/rIQ&)ZENp;SEgu=Wo!gF21.0,i2M16PD_plf5ITnRm)8'T.:r0%24sR;oD"&sAd+dH2gR5A44S9!2-9]\5G)mQ>>W4<Wf2>.?^SOU7mGTY33M@*PO%i'qK\ou=h^2W(AlUlI_fn`>rb%D\UMA4]:1<8%H`itW`^6h]*9(5<OFH;IkPBm94ZN#CIXQsEj&A7LPnD@81C)M&<'T,To-9gl(Ru$U)<C.=4P)62`l<b<Oj<W@_W;8&IbKNrSa.(S%\M.E8T[;lu"eY'Mp[&js>X&^]G=!jO'-D\,P_=g4\Fro41l(fVbU03&RkK1O.[#/XF-q@6IK)<a*f5e-HD3C(@T[EH/Xssq-6$_M%k1!k$nYV!W+`UVLbs=O4pnE,+G$F7EN.Y<e)5"Z(QkC$uD[J(Jq,HBQqeOr++k@K+P]'a)AG]rY!0#IsZH$U!Z,QIj)=9d)[[n#Z%acE#?O5C^'8bhUk,FZn/Db][BI[m2uhQCa\F?ERKll2;]h0=9/]sjDUe5"lGegmZqo#47qHBA+cO&_gL0%AR=r]3n9fo8DWQKfue%c0BVVnaW9"7,&Xiq-a-[@!uW:);CCN:H.%_Zb;^IRoK!f\jV:=A9P,H'i*)qj7E!aj3mP>q><j*Aj\8Z>tm#EaudJ;4FPXq5A"Em%:?DWQV)*BMQTFBZc&nD$=I<Gi/7-8YHeA^sp@aqgGA`mpfN`UJHe-f2?+PEspQ/Cua"8!hV_)spn3"hLUDTP#2thF-O@@Lsh<dtH%gW?Gb^n/9YMDNeXan+i8g/Oi<J8q!C;U<%uH=aa@\YM;L3HVpCcq5>:HF<\Ua[mIRNC"d<9N<T^n#5J-fNU!%JZ^$TXN2lL-W=;b%45U[h>!F@p]@fTOGdt4eH'*%>`U_DZBn$Tn3WJ#kl*6U1EW/\K'ZI-MNTIkD2UO2T%J@EFf26`F/fs0HkEfEJ(VG/qO(0s5!d3)G%dT:;F&IF;3%+c=YFK'X^UuO9/0/5p?_U)5X!C)i0P0HWTlaL);@s*@X!:=mWL7c"9J'ge(H"fJFeSY]bqEhQ%`4!+``J'_H#6H;9%fU]E7aEEL(K6d#1&nR-tk0)n^7Jf1@9%A<NYWlg_T$7M7mD5[nJQW'[F4NM<bN;s/`/>]gfS_tl.cu@C-4@MF>>lIBMY\cACXG]4%!tcePo1e"D5J`u4[^sH+o/pLUR&m^86KKY-M+K!)EC`!V=C,5IYu$$1:gW$KZlQJfbK"7k>"hq%R7(l;A'Qc*2cJ/k@L?uK_P/&\%dd6hM1:FKI'A4a:4oRRA*gNAko\Jp);iB#H,g2_,*VJtM2/.6W=<Wr=B)NNHHb?h&_Q'HE7oRs_]Bd[^,c[I0VJ>qmb)q3;'J2qC%mX"UH\QU^2$Akh\,U]rcb/1feY:CsI>V$Le9)<N;FkfE;1Ve]0Eo-9SoX,'hfsU&P,4D#r=-EREe8.l[2XOmfP<U((c)a*mZ-R;g%T5Qb#`cdtu4%!^u:<h#@R*Tg2NgbpE0&Pe?$##\"*?jr2&]Zb1'1^NnWU+t5&7Y0)^AR\e-1"<++HnK$r(P@u&JF]E)u+Jg*bbCm%%68RI`:5FlEK5;$MA'J$=+%s>CkB0B+%I,k/)`9sZR)!65A_?\i5HP0klmdNB_(=+]9eGE9Xnm/$eRee5eD"tG<`8XoUV8E+=,P3%"<h()?2*8ueD/B*PhFZkRRH^Ta)=tU0?.gcS397K@pk]*KM;9[@%>m*'4t5>kO6kRLaQIb&tfu[AcU>&=G2$h*\BQ]cKs9/-$!q:%)s`kk*;*<nRbNe![a]Mp&oHk"p1eZo3F>>f?s[!k\(&#(b?cJH1Pk>&W&CLD.`tLYhQ.sAfRW(%QiFhc^3.]$in4,8jrPiV@>;[L%qKtOo:3'/T$DN=`EXFNVTV1B=bPn_e/,SA@KRGeiOgjUW<P?u[cS-LKaWlkobgc8gX1PFDc;f9:rr0U74ZNIqj%KM`BE?8oZ4bg!%0CCU-qW<L&b.Bkk7,kgKo\SKppp3C"!S&',h_K!-f,hWCJ,3p58E%W8`K,KH4Pi"oI3tDIQ?EGhdPTFLot-"P?<H(6o[Rg:V>kG*%?3Gi&kFQ-mjJ(e9mDJVQE+`5GH1.:sa)jT`?JHA*qI][IhIEaVpTjh;GP/L@Du7g:3Gd8_EZ]+'GV3+9$c^H1o^4MB*kb(r3d-Yb%ZoS5:Z+#G)KcfM<s0/iU]^O&Vn`8g[CM9*S/9_"]6tgqsEJsO7p4?4/FVn!+mN9%>c)Y1@W_IoD3?TP5rR1Sfi\fn<intV$?4MA%%l<i@>Vgch&Y;d74,EKSd)'2#VhmeZ`qn-oB?<X(N@\#_)]B)$Pl5;2j#nF<!1674T;aT[$n)NI"MfCgKB2a*phtqN_7W=>6&E>tG%652*ZKo&$b^@^NQn@hJeI!Fi8ql4X@Hh:8@l`D7(KY*Qm*d9^?IQAXhptHU73l0.F^c,Cp](lh(cOoaU^3^!f431k.3ltf-V2q.X%rY,6Vk(N[/m>FK/A&gt*^]3-/]A$\Bm/D7mbbX-:L?_Gl/k,*m%h&1os2.PqPh^CAqoA43\+n+&6Wa7D']X%m&XTZ71Gnl&Nm3:J%S^gQU5+1a*Q[T)3qIIX2RnoPr#p:h3>\/#,''.mCmi3D;rp6!\\c8Gf_tVi@_35@_,H&#\2W6IBeK:%Ir0GYK=JgReq&4\k6Q<f=%[9"%*X,G#Arc$m&5'!8;(Nj`0S/`L>q+AB\[LY53T%l='iUOWV-C=VhcpB88dMt/G0UKJH1t\hu;0q9J5Q8\$hIekX^!Y*]k]bm3%nc#e_ml`>%Dl-=Ueo)XJWP3fX`p].@^\Tu"6h.dF]Ya@q%t>G-oC7NGET-I;54N!_<270U`=(X3G]58#:JYj4rTTZPmm+>h+)]uJ%C[TfTFf%5fcObg(e5oie(HY#4i[dj_;'V#=5O'@PBP+cOXiYN&[cS1)lM6:#H'm,fh?G!>KF#=6K-mO@%>5s=IeTt9Vt88I4sfm`%QhR]MI"1JFQ0>@-+$Y#Zr$!2.n&(4[o4>oP^A-c!TqUuurkhHXKm!4?FaNKG[q\I+5':ZG'3k>*H(=Z3E:3GE&!Y\9^9TQe>LLOW%(RNHtpVY[>o[+c,@0gWbQVMESZ2=WL9?a4=9%^4^U'-AmHhP3LDcBf\VY@WVQ-V("mTfeRaeS%NSq$e8qkoq(2r<<A3IAaBRnk+i%]D2<OUX(%\^Rm/AHgo5HUSg=pT%r*]HfP$h.kP+Qo\eE?8"7O8ARmSmVQ"q;6Tit0/%<^imIsD(GO\i71:i6^!f*Y!qYKsL^ADI(%qO*o;5J8RA`'-DVhuE2hoC(HYU:>UEqbR10>F42Dep6P]ID,(K_"UU[5C<=K:Hgi2EIVu>?%2fH,)V<)DPo-OI/_B-GN&87Y<K^G%lKkJT5hFiu_UUhGb[!^#=Ecg@IJ):VB>:tLd1>ZGhsZ$Z^3G%a0l'gFB*smOrhH+31h^i\*q%63jLmpmhoM3JEpB]Ap>0'\KG.t:%Ie//@*DH+rOhl;5A^]Hhrpk`Uc7B\`Mljt'cJrC&afjl/.l$_`Z(8uJS7mo'0l9Wqb9D%Dl_OLDjO"i6cc"r01WQCXKHhRD4`,\Y%\=3A)B$ul?2uh$J!^u=Xj5s^_FCmR,GNN8HFRd<A#;cr6f[V#(,aYYo2M7(,>fJM0)8L=7G5o,=.m?+GN!CBTA,GMU'1PF***"*N%VcQq:U*'1&\g*>chp[&rnuoO`V=B2aT<:)rBldsqD.;Z8E(OCsn)#pf`jO>bamVC(Zi.r9Iju8<SU8fAD)4K\@bGF[=3[mu<pjKa%3I9`YSU]a\Hf'%rWG>O0gW`YEc_%oHqtIfds/5_`O(U[Aqt*OOP&TjTUN]\74Lk(_&>jI<jijuVs6<!%pZSQZFr;t-YD_"qF&KI.%VgIl[!FEm;IcIC)FRF=bb`)9HnF6*3bPb\PG*l&X;R'PNSBp*jkj_`tj*^'UJo!Y+[dh?@fm[C(gVpil6+3C&_Zb@)<06Jp`_7CT%(M&$Q&LV,#-\66-cA*PKTl=c0c]buZ4aJLE/DMQI1:JP,bhOMjO6uVLHuNThJh,^u?d0PU_SeH_oBt!:LL96,5)u=\kDl7jiM/9N%OSePGCXWYTP8>&^B2`UM3>_-*$/<)T.bcLYUkV*WCpRq.m+tN.(&#O,a-^N$E@N%_U1Y_prZu30\B+XaB>`<d)4@O<PB5mef?X?a%bSG:I:<bZ8J:BImgOMJE#<I'REr4S5CGn&7_36O,F6B%'F6C6ml\qn%=gQQUm^+?_Y7Idf[!Bu0NK5h5@%bDEq?jD:b1ci'6qklb%pl0".rk8X+eZV69[(eh\"'g@tVqXEnLC(5mQ@JH?B^,&U>=j(mk7t2k_0rp8[jC!t^Is;c8<;SNDqEl+Xl!DH=0@MeVdHWegM_hP%Q>^,o@^[VHF-eQ8\3E1MF?+5cndN-gT:c!sC>\p=[tDYjB5+lN]R=lL(&mk&E(g?\P9+l:mKb\!qTK*.N?A,ha,a"@<3pRH[BLb0%JXAPV674kiPqsGioVXo<3i[3;)Y550na":KAq-.Ckc\'O^>P&2:QfU0EL874]lpPiY$$S0$J)$=U%>2K&*Ha4FD$oG)i#e448k#3%rSt6XLMM?:LK19[3d#PA43tWgl2:))+3'Y@-XVGAH]4!#2fMo:POSA=0D(%c*l#]*DZ5ZFrUe>+m^jBaqXbu]h4mB;O3W;(EL'+)%g"#:g?[GO8Y3eKd+H?6QXe-(8i2.;*)T^V-o]nIV290;`;-"K)1VGhdb]icGmg/IFp5'/=pYPrKai@2<gq<F]L[!,@q-s;=0AZJ@%T"J\RHm@+9di>!OJ)qXDHf)j%KAU?jZLPs%O4n6[?+P:CaJ7'7>^:SZGG]<9nfu3nAjO`0-[4GOEA:e6\sI$_o8L?M?P@!R[=\97%GEhI_hfA_qeLTDHe(7q!dee7*l$e=3jNd^N&O2,5PdaQXIJ&b\WVFlD5"I0%SA9L?I"^O-b_CN8'5IRu2HRA"k3B0)2=?V*QHC"#%kaf!gk`%NaSu7cV5M9a3Ert`qq6\sAG5CtMcV8>[at;iHID'R0_]S?;q8Q#BVZ6.X3'VtH_<\',I+UZTq_X@@4iSlKitE?.>\5/g%rKaNdih9/n4aH5T`HA(-'8u5EV5s'd_M&Y1++l;K9!G,5]_J\Z)t.V`AuEl/&"c%U4(L5Z+"#'g7mI%E,7hk>cTQUPrR7hAIXUj9%_f*[^NrJ#;%lnRZcMqsTR=SH.Df#C>YQ+L/s8JY*rK[BVJ"'knoBOea_fp=M56(GqpCD`Prn5bIc[Xb5ae2jf\9dbhL!>gNMb!3`%,O]JedF?rWHAG%,ZV0L7:&"(1gH8./hYPF80D'bG2Vb=/9%-qNhWV^3Ac*0UhY_p/>X)o;`u@cT68/8%IeeeKpbVk+kEn4.ZC*WN%Ykdt$DY#$$nG7l`]rZUU#@iU9jW,q$Q_APeHY>2`_:ko6QP`b(0p]2"ePuplDa)fU5j>1Y:Zpa54/pWVE?3OkbtfE>BO?IRJUQX+%%K\-!(P1\ZJC29k\J7iIc:<1&BF_]`/=2S=(0A5)1kY>I">-%=[PkGC>Qj16mE#E!lXS865!;3Lg9Y3&C[4W\>:#WqqQmO1(Na1:%an%.5>+E:R#H+dCSX3@*CdV)OA=#CH:L7&tQ!mGe9!G[s\ad2V=1shF)]i';-jhec(cE27ZDoqMduN<[YY:9_'j]9Mo?,I&5uOu_%W1Y3d-3u*?i!#E6(q>UZ'mlbZ\ibBpnRl=(8]k(EVI(l$XW#FqHUa7SU/r7mX_n2@H]JO"KGfBl<T)nhL[d][3k/1H6K+(+c<oO#%HjMQtmdMpH>4l\&p9`(12E)mFGFh;[%2[iV_@n.2;(s(eCh!lV-I1hVTaS5og14a_5^$hASpHJWVI$nXVXtYjgGuYgL]nC>@M4el%eYCf=B2T%`'Uk2Bo<r@l@Y;[d5gK!j=/$6J[d)HRJTbiK+4q?GjFGcS1OlqT3?8]8H15u>4cqa4eO;]T.3^m\M"sS.$.3p#LXkVZ%g=(^QTA/ouN+SFD(q\4^0V,a<4[GWSqK0n0b78f++Z!4FG,Xb:"t_?,3h@sVfJ4ImJEeV16&pKb/FR;RMfCRV_P4]gLG_mSWeed\%a.S=C3@oO2Gup?:5b'[44e2>,b@cW<"iu4a<l)6lZhCqa)%9<inpIX!OWbXhAQWi)l3n;<=R"Lp0@UaP=r.<1O=XVWYZ@7/HI4B%%ZoZEd%\iPU0]UAfR[,IN@(E-g*`a\[>[N_]Er\;Fo[hHTIH98-%#1[:`DsB*OquD;f/H`sQS<_]nCaD)TK\^@,@)_'Qlu<Z@(pbP%!jUNu:]$TMD/Kn&cq5r!*"\'RP@)3CabA71@O*bm>'sGhLgcR]I$bduC_5U4JL$C^.RH7hg&;'8Bjr6S:baATTA'3P,_T6*K'KAD%?Ig/EH:o\EOZq=k]$s:EkUmB(mVaY0%2"%9FRLiUSgZ.fc+0E5YYo3O=SKq`@+`Xp8%e*-.L1o?`IS%,N7jmL((l+ifgl_cEngsj%-T3Sc_ubjkC]O:8\Eme"CS4Y$fil3CkgL]*=q$.`$[Bd0+H+kf;HS^nT%>%'\dQg>Cuj4jcT5><l``X[b+:L>]r/lE,@fo-jF\1^%>DMb2fY\%A;Y2Q^,WuH5JVc,dh9^_T(eh=C>G@,<SZ&NR-&hPVQ&!?-]Xt/Q^)T^l20CGsM.3mtF5uKk8ghJA>"f&aWb3rcNm7*j%0Z@+2i!j0AP\6`fF]_<\/tZaS"$Os7:)b'A]?G7$,J((U\':V7Q`u!#+scUn0Nr3e+g!oP\u/>]D<:Qro0"_n",#QHi_-A$c:7A*%OSVfW"qc_e9-PAbV?i)?/I.;7_gc2TZ@L?@de`JXTQ$#2\nDRF'[GBu'rL1mJNlWLGgHjg,/#X;920[i17:79![.TT%O6BZg!^/%%dn.;-7M5sj^+DVao9r%'/;T2k5L%hMP2F4AFl#8J//df*=GWbaqW5dYLTN;-FVqV@\1qjT:lGL74jVoNebn2:fR->$W.j5RQ=@-R%XGZWq=EG`0=PQ=bA-12\X-a0'//?hGfcPtA/.+5e>-1<$)cDFoAA7@uV@kc)f[aI[-[fK@6(]Ja<JitG"'>Z?h0#9LB3Q$'nG]]S%cuhLNJkieR-%(I!'hY^4"F$c9bc$u43j:bX\8BJL)$u]mOT8]9Jt#$9f3f,Qn`FJbREs9e"^.#(86*k8M`qQoXd'S(8slcN$^f%j%q9tODR"*.e"4)`t?5JuA3u9U!EJqmB?k,trIMq4;bV$S9/:.X2L5Cp\+D>#kCngj3i8cGTL!-_r;:SbmJX>G+W*qaU,TBM*#`XQ.%YO2^c9d;t[$PU+NB.Y9=UU0B8&nhi]c*S9k(0HMt$eqpqG4JCQ`><s-G*p,D*Z(SbGq"U^a[DUu4T`oU'l"ut<Fr#?BY$>ZLl+_.%c50c0.mi6sN7>H<YS23_TXBYT:=L"t5R]Mp3bFN$2"><u&C8\$,!ZoUPZ-A.OU@C6GJVKpKpUGeW[lbjE]_*`LI*kF>4j.H[\8gP%N3,0uf7N3MFIfq":(L&W(X,u='17LS:,"GhUT/?7378jk[a+$fE>*b)Z8kt]PAJu]F6rQC4(5tf4I`lno,*sl+,h9O2FifnCsCWQ%$[AE&2)Y[?^Z9EVO>8ft[;jt,PN/iWGR5]Da6W>n/f=p4,q5s;3F6feIDP$tU+'ZijQ:6LQlN<$f![^.oU:VR$C<!)A)=WSEjhLW%,b:<R$U."/N@#MiNon?9cXB5ZIIT.n+>rAfRD-R^QO@fLj[a.L_4R"96!7(0AE%V>Y)"BFBBpf(2!8n\iNi5]E]I/Po[ChA#iqbS%:lbis>JAWF0#t.HW@YP!c,P"[i,YnSpCPoc*:"n[YY8<I[;hE8QfFW-MQ_l[nQs/<?ui>d[8If7N[J.5*?.\4(S-mTN^09?=VHj#%4?H;".p`^+@H)9]QoU30!kVh"ENDtDR8#f(<T98>JkO>pA`@@(;Fb6W`o@=F^+EKXqC:*!S22PS?ub\,f!\t+;#:,3cH_<)+D^I+%Fs;m9=Q<t-=IW)/2qn.":[JKG79D+$^[F)tTYTEQba.c=9$?l[LsG5e]^q/Ke>PENF>2P[VD^rC6Ba<jrDD7c&^.CVMg2C&D0Z=a%LRYkLB-Y$5i%Z</IHqNC1KUcJ5tS1R0G4VLLlgJ!q\$oe\b7^+0+oPHFD>5C>],5`";?SY-p=@DbZo%VBl-$hb<]FHEIuG!4TVH@%Al6'Jjqp\p04)FTEH6D0TZ&W_"s'[<BuaY\Y]Q9O9\lJJBP&LBntT!V-#At;Z_n[5H:qD$A?k4fkoAiIq7N'@P[0Z'Fa,8RHU&B$%ilO""fV!?]M%pCeOsUhG$&/>PJ0DEW_=09qMMYCj+#t>\0@#=NNY3G=UVF%$8S>LfgF))'+dLk0OB!\>-P.<-_L'3TXI*B].!^E\%E[C'2Q:(8+KV-6r1kn#Go/))"[VOF]SY/Z8IPJ'h7M;EB/R\(%/0AbDGXKOdFsRI=dr$t#Sq1K0@!F_jWB;7_(ul55<IXa#PV+t-%dn')m19:WAQS8nYe_tkGTLisT)6AY;FU_B+4ukn8Mm-#[ong3d.!nm'D;kn$&J8.8SrXl*M^;'6%?%->?ZJ?Yr0Ih-OL-eTLM>M3%UGKA&a!MWF"E?fT?r_=9jjQ"@XaC\E,UJg;H//Zuh(p(qAMu;SFXo"O^!sRcFJ.H64Y9/:)>A#:0$J2;WtMDMdh?i)EIuSEW804]%2).Uf:D;5(:cZcj]Tp.kAu$'gW59SiL8S1T06oR@eBNlg4i'Z,/I<qt5<WImo9$B^:t?HfK6@8_&>33CA:hf<QNOSH.LR)K@+4tY%8_o@g)[@)&Na*ChbM(o#NpRWQQ532*_(T02369Y%O*4paQ0S4e<gA;:M5j7Bftj6^A*JnkK_un16SUiJLe(W$+(b9/-"'9La:!q<%&YZ$kee5h>#)Pm@5(am#7Tu`(Dlcb]B/%W2kkaok.UhufX9ApiY/([H?9UMN)+[dBVm<>/c30MueJJ]jP9d5D0p'f'HK?%rVm,lr%kG+7#Eo9>FDRf`/YbD%icq5C%CW'KdLM6W!7S%ZAS[^0^BJMZH2n!pNN=o9aferr@0VN,(-TOl).e+CS7\51\a6aP\=N7j"^qu:l%ai,Qb<4+]rf*tp%hOgc=`(GjjUO:_))<?A4$,4RICtPsD(8)^r>!D4s<pU*aN>k3cEY&TSirYP"Q=#N]apAJc4A@#]B'S!%V;i]V%*`6]Vdqh'=,?:rfM-<<Q.;V^^Nfg.-ciVZ/7d$uO[e;QF(kT>WOTWe.Z+7Har;9gETZGA,Mik$TrQ<^?jor$*,jq9d*@^^!m4P(h%L$8Hi#%Laf@Ukia3ac]^_G6\`A7)VEkn;41ZTQ'qAh\?ijBTlKA2;]$@%F1*K^$_NoGh&Rih"!MV\I]JWN)OFK4]03&_]9YGq^Wr%%lZGgJ>pj^gaKLkD#]6q#6s_&I$uYGSE"YNKEW!.]r-!T/<d8V_P42Z04nRs6@X'o!V)[(11D#lT%t]WW/uEWMj,IGe5]CM3!%10%),(bdNT252%*m"P<+7'im%l*I83^::9U7u"Qo(o%)9b\3J`97pXD1:BL#6"5"f4Y]V"o\2dL<"QOmB_57`Jud^)8K.lF?icA8a(i%l4.gp@@4eC$s&j#YR4sE0B7B"lGt:mZ*)!gh_9hKH5>#u%P:cc\XN'CVtb8&N*ffI(s/b!^9i%8/BVg*F5@lUA;cRlE$Xj:+)I8:%2*c%A4+J<4DQ5<>p=X"Xf5[W@V5U7n*@'7KGG)VeN4h+op0;7?8hmH/Zs=(r++h?,_V6b1F3\QgEC+Sb(a@BkX?DPZ8GJ1tqk5&:%%MCa*NVY+=VV4o9D)%-]6JW7W>I-Bq9X+aoB/+EH)>5BM\iapOOj:Q)"dCn&"i:g#DJf4:1>,mLk*_4!'$b)C'&TO][ATpm`S&=p%Z\X_8?J%fjRR&qZh;Vlha!3rT5!<Ob1FNi)5hMX@@O'6Y+<tM\7Z"o/9RUA\7"saD3J4G%C$RGfg%RFSfcYb,kX0h3*D]R+F3,&X%h3@t2%M1u3KcZ092dj3RNXg00I\fS%P^1cPAea=d!;H--#%NEs,2iWf3@m;lLkaY%g8!+'V&4>cc0tb"\5M@M[aIMkQ67AT+!s(T%#rHpcFWbgg?sYa4!@'I3R)!dAn%rQs1E_-V-=Z42(K6Gk^b@`6o\6K5%E[/G01T_#p*XoZCab3Qk:B$#:HR8"SA]T6*Ht=bBd=Vt%U?AEYe)+OOYYtF>2KE2k@#Z`>`#BUVp16Fh!,*'u(ktA`X/`dpeC*e.Rm@bQi4I4\;A"Lm]jT]cEUM(h?s*+<L@?1DiV3./.2"MG%XRk[F6`k;l@!C.T_X;erY8LC#'P^']NM(*)FA&>>987CVVLr6m4<c(4E<Cq-BanlT,b[">LuT_UQN0LFMHJ6P3E&d)orVp2K^:h)%LHuTZ8U"rhGqn-A0ERa9@hNHUZQ`%'lJfnP3LgU<?3mf82O3AP[Y?aEF3#75%V(bDE[W#4(<JQD[$NGbLdqSuTHd-((2iHBfW-gk%;<4r"E(_n.Q\Q:t`=VVb]HKM>NqC5pBBNcgLDsCoVADLS!Aq3Y3Q&#8\h;5i:Q`abNoHShdN477^9F\pWdg8%Q.mDcMs7%?+=(=Z%]OPnX;;o+_3+B*dmkLegXNG6ZYU,=e_-bG`<Qr-gl8"=^/L,7_063X$dRo'Z9Jh\>+#IBV1RmruS4XT&\-O/h;nF83lK-#*6O_56%(C/Y@W:@DkdK^QV4H+g7iAL47E%J\G3>\,Q_GWU_VOWb^J$GQT1d(nK,`66^HZ9>L[Fu-[^M_gL1[h)5^\MN1Do&uh7I7%K;;oaA%eU5N@pd2N(=S,!D01En.Q?e$r%%^jd6fNX,RS6$lTc<%e4"Ap1mYci6RtNh_peLmq=HXG.P%cn;\GDmKqa+EGji1bq8TGm8e=<9<%2O6&Knf$3E@+e[f7+$^d3Rb1$A4Qg`qkPZ#=^gSP>M+c]8l2!bllm+citrkiSd]-_M_$3sL*u\AP:V#/B-@GgUq*uY3%Te@9VjD_%Ta4J>';l8TkZeo3\+Ab:C,Fac3Xa0R3VWVi&/@T.?'@f,P<i)m"2@[73,trnL/0.Q[7@1Xb[<Dm8C>es,*m1C4J/^"_CLo%'*CaI%YOM<Cod;J6j.pQ.oAj$]-V*8):IPA.m&K'YUpKB7;YMQ=I@`-W&X:f8hRHTWTi++jhG\Zk#ZemhN8-RqZm]RsE4S-(lqeM'60GK[%*AlJ;LXMNjhE&0cbg4*_)I6lKBE)*J3^DdDQjrR=j.4=)=[9!=5pYYLge%.S,[82\JZFf!=>E#od[V<7M:]&L<COn=/Y_#19N71r%I7b,p#>[jsOms3Xi)_LS`E[IQ4^%uJ9?]gr+97E'8mOEDi1'"T/<Z4`I?9BsJgCp",)h[Y9B#.#3(<?>n0MBTU"U<\Yu]rDmKuYo%Q#k1(2kqG%q?TPKDj.^9*CiU]W[fA3:0@2kQ&&Q)KHA7_AX*qG,&=4@oP$E]5A,iJ&5G;L:!'bh?;qL?-mdiGih`q4+dRl$LCqnK%a`>(1BY:U"Of:>q1*tl"4qh&;8TPsC8ea]KKoW.YG*H%[Kc2uNWN`gg'%8<c8$%G(/LcoP6<*Lk(=KTu9c1ci&31G*'ba>if@UQg%5H@ZfN#9LC$Wo6jE2a9d0ZA_2@*u<CS4+_62(i0dWg28FBMQ"a1f2Ac:n`h<=;cr/E@l3`8<?M/EONW\FX1XVa^OnrX/C^`B^&=n%EtiCpoI;StH1,!7%m1ij9&C,[TsEC&MAd,/&Ck_L-XdJ7CI/dVY$G&dWob,W?+luBW(q%,9J_KUZ&:P"o`fF\'gGAFC:S"a5nk99%oo\FQqZ\:*c<\n0TIsf!r,e8d##.,<,hh091GEPf]s$?E1pC,BT0We'fgk=P+A!22K/BtMS7Y25P)F6onH'MPGU-j0Na7[D=^c[j%I'NaRBW%-5L(\2N<[:0Sek/n[p8C>)alAi=%4;2#;llMV#0j-q88srp7<a]='L*K.8`ZghJHQOO-@:Z/s,n-d_IOI*-c)UnTaY!B%W,.Z<B!$AM]C9k&d!,S3XoRbs>EN%^Dc,"B=#=bAHTNQjV*qKl=/otZnu4KX\5MZOZuQ^g11>lj6UP9+%T-^]:aiT6C(A_d\tkaq%[&kXCk?'Mc\lStH'VL76P$fYO?F1!o%TY0]Se4jiA2eN`g!<Nu#^r%VojSLg+&LG%HsRS!d6:it(T0449LX$\o:+g&E&J#I5MJ'K%*:>MV5T<`;bhT&38teCeY%giL0pa0(eti/oAMKEk2oMY&o'N/#[\i1%aP9MsMo"VWq4upbR_@1.'7u8O8'FF>?d'jk?ca\V9ipdr%%H=+SpcMTp>"99sWS,,=(U@BC88)-5PHp98&c5gq_ie7a(h]?cn`DY)YJRG1CB8#>"HA]LBF\oO#]aj/?<%)@V3mRl#te\sA9sU(%_0'4h95LK*"*:ol&^RE@^Vd3G@5jTX@jbn5SCJ5A2\R5_$ti%3ZW,'a+G;c:7K'3\1'ODR)i*A8*H0`99Z_R`&UGh8B,1E-ZoLp\%i*0E[BTHJY>%QpNk9A?QV5ar0E7Pn>fLqM<Z"WE*%%t$JZ6IPBV.7SgYU_sD.(!&Q2CeG55R%[14>FSRBm$6<?oR&e_3\-<YkhAY%QfF8_7+BnW'2;,h3+rt[+%0:eA>KTOLVO+%%m8";\WT5U;i1J"?>BQQ["Sp[dd]hj53Y)D=7rWg%Y4k!>t2E))+mbIph7^=WR>lL%OIq&.?HGL2q'8[am<1m3k#32_E5*#b,,Rn)(Sd+>*fN.<#dL^[g$F.C[qj!L7flT1gRC8`IX_:pe&Rq^kK]WHnDKYhld($oa$XM<%1.:M"a:iOo6C7%P(2I_mN(9q+3`9`??>c:f\2cT[YSS/$1*1=tc)pBX>@6eai88C^Tf2r5bcORo]B?9S-orKm'I8j@)G$VjXD6t#%Ag&:Z-#*AKZEbZSh;7(+O@uTu87G!PC*=aY=<2emm&EdaHA]qu4=M\KX:JTt?k#"%;\U2S%oaWo>4pOD>b(22Xhq1!38JMdD[tCS%a[;DOr9`;L<Sk>g\<+MC!^%P8XV67cnXi+T<cK7p&\+-7=.f_*B,%\/\BJ3PjXn8FP+J-G\S)-U%lVoPd'`:0;_um%r6p>PW:aB%%`5l))H:fF?>"$uY=[X0\Sjan8E@1nF0/he=6^_)pWEQ%Gd,p$:*Y;Cc)Pu6rS,4f7+H/Bkk.\J\`nB"&3X'K0?/[g[oPn,g('N_j%/,Zd0O\rjm,YkQF8S>$;eh$gfAA`:U_%K6<\TD"T#jk1!hWt<1,^Tl^_45%Hjt(=Q8;WDp"5u:==%bX)>0qmNp&H@q+"!D/IZ'^5%4I\_]K0i*MB/+d2kTMX:ZdET8*[8a#W8,@g$jtDQ6FLhZN?@3k2qd%f+%.uK9pF8I(D_Nn*g*@:+K3:BQ%+'mW*,>$0eX6s*(Vns%WY4k%2MfAc%[]9Jj]qnq0%H]<F?ark[&BO<1pFoG><FSFrbGCUHXPbS75l.XBJIIdC[+jW-"ND$4[`0,<#$8:MfeA0Co)oeAZAKf%m>H&NXf"LGlHTSAa\_2A7<YXUWea;\c_=c@1@/-fp(Uk@Zp7?I2&5dn"<m)f4Ht`i\@(&f5pX>W=@dgph[%=L;1NBGlm_\?aK.*D%mPdNQVHu>+Zk$+HOA>-kOp4YMNot4LQPtLnOdZ^3Q8jLIC9sY1AAk3F)BC]W2GrE[&KdT@FGLU:b7E_s';>"'M_H.h[CWN'6Zt0j%n)Ajs&MB?ElO[I22sNY7>P4I1RNh`Z]Gg(jY%]>(`c+VR$DWICdDmL>I,JoLeWd:Q<NF`ffQT2"d#]9d%B#(E)T8J3%Tdg\Ju%K.%mEe7O\LQ.8fH;T2_ND2GR0N-4?'ul4".H/O=<:#/-gB3>dE#5m$&6kYA7Ch0?cb*\c)bq?FZ:8T+dTNK`NLVU':a99kgcjiR8i%A%_b2;hFp-cg]c;0$8aM)&b4pMj;`K*fINo!5c&H0h?CjS[k?*Bs]U3UQnMp=f84LK!g5Oghs$C*gTW"(PFB19KKpM$qQqNT-,VHc<%3H)-6<$dZc$WICU'Ts4bXqe3H`V7E:YgS$Nb!46<Q%V3B!lGYY/J0@#MDoPDZ4GGtLt'T5+\_$jV<U&IZ1#iOP\LKb4r3dZ5ch+l%mgI]t%T[8!qmtCSh1%ZBFD3Rar>U]MI9[DIA1\o*:R1mX:.YcBA)`pm>D9]\Fj5Htm#O-2?)2"tA>I-i-:nItNGWHoI.TZ^\B)+"%9okJI%aY^$Cha?#q64T?k/:2YmoJGAifIlXg2*ER-K*`\+388mO"&]4,b'rda-;1[qQ=Xko1`9d8VBZ7AO*9-*C)JQ%&.>47]<2a%7`\:J\h_bZ9uXIo$QRj4lsWCS079?+'l-`H1nBJ!Q1COmqONu[i\t;R=ruf1E'jrW?'F2,:TH<f;Bs0lqgqbq1RYO(+*4Z.+VT"@%-]s^,_h3oR]%sB_c0\[*5miTa<?f+?UKOpYP]]>R',fJsjDiCJ/5[q!3D_nN<ic.:KOhY3T%om1`,=a)@SuWI8O!tcUCoCDD+b82%OaMfo^+`SB,2]3F.T92W)s87fN?P6uKM.^nkc:f%GIW-"56QF9RKfrmAtBV'j:jK)F":.DH^rP^Jjr<gDU)KcRrWM#'PtLsb<AH\%<UQ"GH3hE[BO:p<7n=Q6k41Ouh@LT'*"(;I2U/%PA*;BA_`]nmXhPHh)kg'p5F/lmXApY<#jFekQ,d,+(,)7s3Q!$`3%n1hHGTb0%eBC\=Jq=O,M0S:$ihU5oYU$J_%Lct`0@"moE<&IU^*(:q0SElsMRp2U_p_>e:[+r(V>Jf26H#_=K!.><5)@[L&K,V9?'6)JMhSd&%AsB>MX6_;ZZh?L\#QK@F`q^>)lUf0I5LGERab\0^\_r^Ti\ZJ?U;eKfHDkm:=KGfY:/59hh3?;lSU._2m[E5^_.e#;nHb<ghW$Ij%_1KDOasrQ)8t5UK[(kkYU7V^*+qEusfo1Q.`>[iOc4q-PC',\Uob?e0IF2tnB!O7\P>sITp9[\/)FPhV8:4V,<7nC-1s3:_A5L]!%%WBX!^`'9'<'t"X%iYXE-%H=i8MF5nAP#5uhAX@P@\Hua=nW:a0%+MQI_Dfh!%qJ/ldRe`b\'iMdBK>i.IiKpAi52qi1-*HIbtcm%E16X:WG&=Pf$Do+9r>7@fa"On4qQIn?0d>WdaBaoY1.EXge!k?YqRi;8-m6\i8G2i#BPbu.eu#44]RO2=IUAo(.pJb_lfMVg+?-l%UPA+ls-?ecD&T]IQX)]B.ZCb7T;3WDIlmG67&Dp/1oo=YJB3b7^gIgU[Rh_G<c"&&ZKfIhU87HrIYkJH%9tc[L"rGHh[5\@]k>^t%Z'rI>BWnHB:DT(H2Kh#9)lBTdY$DZS%Ot)!OsU\EdS-BpHqh<>hbQ%6])P?=@F3_bOY=Nk\J!C)cC`UPD4J-V215u/*DA1I@'5?)%8'Y:.eflL&25ac-KP`#D8&C)+<6SsWfc"C^rh<e7RN'Z8<WR$IHiskraL.(rD]VJ8bpJ:##s%'n<rL%:VA@F*)?)0MKj>^`%V@'M%AM"q'*1F?kBK1&;8Oj?f4BdT=O1o+;!fOFZg9$iHPVg?%*U+kq+UbIrl9^-3M<eW'EYFG2MapRkDS3B;*4;Nknm;E_^(0'9?N"H`%iJGV.fk&@^&#,2V+/IjQGXE<.`R6_'n?dDi#8)q?V<#%THVC2#Xnc(iEgf0Yn(H-ER;h9)"u[<%r];Gc0uWuona.L=Zt]h<UbM2Y%EOWf)cE.1QWGrpP-oo_mG$D:ZF]MZP]qd(A?qWcOGjCN[W`S_TeGqo\E'FaREP!AOdAsP$X)qjYS@oiCh`BL`^,KP#g)QMZVP7#[%dR2<Z2%j3O]BY#"mSHHLH>V8?;k_ATPusqc9it"C:k`,dV:930G:p>j#K@A.;;$dKs)k(3B8D4>?"21=#XV+=VK%Td6'W+&`g^58%@99_HZs<72^pN6U=a0fmJ!Uk<ig!GTM<rZW*3/gHY1W\npmB[DTLI_9-.iqb(=eq!&dSJ2>p*B].9[;W3mi\^;;rD7`N&2r#raPo%9!#HT(Est@N0>T@1bjf,'8r`&9=d;SSWjL:NCj5ce'K@"%=/upeuWcp=H/Dj[0Aa`NN0ORc)S>J0)Hb,=E@4(Fn7JX8:AirThIu<%k2]eS#o/<@LPt7OG'7=88C!e"j\9u]r[DlJZ^Q.*X-0fUM]s.1VNS4P[7Z9a8?c*7Shf'-UPOYkUSLLU=ja3Q;?aBZ2RDHRlm7es%_7()r:b>>97dF=[W0WT(UOjfr)bJ6.iB*4Bq):2IGs>/<W-JLas(/#i9$ph.&7->JUG=JTKeb6"dZXt#]pbR!Wi)5k`KCa3q_ug%%q^IliL(LX[a]uhK::j/,'DCubZ@Z5EGM;Kc(bmm;9N1^WC$e\m"U;irOBQ:r3+4bMf+L8li1tJ'8s'lA#g`d*Cb$m42KhY&+Nf&-%Xc.lrU"./s-1)V8!^9PRe0siQjaKs"JLL:`CT/A\_+N7lR]YoQ6MJsJ)!H+Yof1d^PoQW93MM`nU"beGN"u%G\7?+?A<3LA3(:N9%JqU>YD:9@fDa9>:+q:/s?`oAH<76DNpT,]U6("IZ<GM16C@ti?7T9fF45b@%F/Z\1+^6&WJnc+Oj)J,RYP[<KMN,0&5&-cBfD5MX%/-q[GE=mr4b=#A4=6[;p"l^2A:b@i@RCN1s+RPi^S2+]ZDLiRYaZF:j>+B-="$]fOLV8A:jAn@E1_*ETUt_IB$3iHi_\&^C&@AMq%G!W9^RMN.Y*QX,fJ8kIUX*Ub&"BHC@'2i@p-m[E90.q!BHgm3k<u'j+k%+pX[4ISY/[U%THIu@2Md/dN'4+h:[Wmnf)-e)3HJ^-I%T.`,=P9c)EY8<$D.<Cqu+!&`5bSlTqTh'3jL;HjdSXk#;d&7]J7TFF7H+M92V+$mmf&[A]B5JVK)kQq1r$m,$l*pgf3sd?s.r1q5%MGrE5OV5_c<NV\J,0>M,%d*BuDI8a;G;MpcqfJ;<F:567DSc07d$p27+mRQC$+u8O:mEnFFu4gQQmF[E>bSuZlaYKC\,LLu74/ph%F-UL+5,t,Y77V7_]82L'"Nu,k+BLZr*Mog&l-,D2\B57V#7XL(V2urIV<V&I?<el%4'AqGPLf7<e.au.cI*#^q]`?7b+RU*@0R@W%#ZcV#:mcgG4'p'6PE^#o`<kE4>QM!UGdRPoM[E_$`AK`m0$h7OEM,!WoJ5A(IT#WnF'39Mf"B=C:B=$\oPuZt<Mn-S0b6,@(R@lo%PcAlGF$@d<Ru1T+>-A$3Sb2qt9`ie\b[GuTiaS!)@s+VWlT'Ysb)j+^1+ni[+c[Kb,hWW[!uB-L*@a"Ceq8+#_acC4rQ!/f\0['<%euc"gp`3ASN+\A48JN`\-[,_d7'>WB"c3sf4&$*:K3W?71KCV;iegXP5l)IiBi`T5&p&h_OOdfCmSS)NCBmK/19_(U>FWE#K+67T%kjR_)@86#(`MeSZAX*uS3A*q(:&C\X;]Iu'=[o\9UWAFON$5P@5[hBKnT-+co3*>k*^38fA*1*,jT75C;^t5H/^%H'3$ig5[74*g%9`*=/`;:C:Ou884\PP]H_X%hK&c]#H!10*E)q#^c5+KG7T$/lnehY(+]"ea:,MB^9<^\8,hK8HbJ2"%2h;jTsE%6mV!4'L;Nb&nj%.'lE$V,j#(']g)hmZsF)CiZpnQ*5O>/HB@>S)[oEZ:+E]CCbYkE=K)E#hAqGXL-pZ68Z@iSkql]'/&:oHP.<riCi(T`_mXTf]F`t%5Y)+8+!#"Lj-E'0/<h@Mdp2%aS5rEXA[e./@9'RV$0F_5SVB]2C$o]='j"`1&Ks/!]'4!4SV]%8pS8*fY[UCt;8P`B[m'XDP[rSH%Rb44VU.h=I)0:aWA!WI6LXd)V$If7<\D`@s*NcNFQ,+*7BQ;M"`lChtCH9Lc4@nZKX\fe=$'2.-Wb&'&T+?.P<;J,^ag`-f(CC`4%.XdDQh%p>*ndLscmY%b6dVl*E$$Yiq@T'"7Wj-3q^s[pnc)H5bmG'_6GLb>B3Xh2FG"fCb"'eA,>p#jT^8g=T)IbX(`g,;APcBXQ%F$D>B5L32r!X[*iS6+!fXteQu-V`pB_$X^]if6IL]&3li\K.44gpa"ffaG#:V_tR&%X)E1V:bj8d\?_oq$"@F8AeO$cj#E[Q5qTu%+Z`FG4hGOGESaufed5Y9jE9+fX>Te(hSM!6KN,I(/dg3UfgRQLLrNN++K^OBi$M^_nt5XXG(eqoi9?Ir6)0b8s/H<$b)<STP-\5)%U$PE4mqAU%7LS%sEM\A2G3cfX:!C2Fct<1rCZ,_^MD)4k*7P0-):GjS2ba*7F0m3++hYnb,W(&]<Mj%pp+ni881<;.(Z0n?99J+0%E30#$0qkU^X^-%AW`1O-j3!)STk^QKE`1pP>9bb[_bHe/&E2C-)2$-!Z78=:aj!fh&K.lZ,;,,uAHh4P`GF1`(PHb.i(s&uNM+q3%<Z3P;Gr(<_gAmqDMVA@r1J`h,=W])I=\ErD[6WET=*7Hr#(qmc^A&&J,',$_WuZ;o[EmeLA\GV`X+Yf4/$$n(D4+B4M*pf^d,+TC%WCI68MOXKRm;=,7p2T*'oLGNqY$;/;2/tJ>l^)_WB+hV'.*QHt8[T3X@jFCZ2sp`UQ`C;#IZPLc=]q`[NPjHZ/8=m$d'#]Fo]U9d%[UKuha@_BFA.PC`L%U=>bnqh]0C$>?`uRjd\>j?O^2qg8j>mG)O[NIGg9e0sAr.)FI`m1=oqoBPROh#:Z%H=ZmaV.#otCo=QF:-h%2=c6kgm#4;dd5OB97CGa?8Pj6,ju.VD_"[(n"PaGHV)/TKOLQui$)>a)bmeQf;#o#ZZn4W%b-t']B!q0G-,Uu\c!uJq0>#EPFiLQ%"")lVjl9Q3*)tnDo[E;7!EN[XI&E.5WgISFIWGdUdP;3Q($`W>UIj2$8;P%(SqL+NquDDCs!&BDm20sNKbKGiFlThY1h_k&c``(4%f5cJN[Ahl;duX0VA[[H'4N_B%;*N:>>Fn3K]49OZp"d2*#O.!+E%snlp;Eo\EjuUumO"12&`,i2l]=f)DVo()`i;)XD89VD[gWq\%Deu%W^Sq9EZ1O.LA@EHE$La)b\ArHR4BK^8n5;XE[aZ,"_VhflQ/kbtP8Y#Z"I@<K`QEt%W[I1*aNbm2R:;W7n3D5Zh*C60P+D:O%Pm]<d75QR$@'-amNKFf&9m+9+*D@Rcd&1D.Dbd1X<)?_lLT=V4.a6*ETAY`qEmo2n*ch-0qb7eBo:@d1oWYo@<LC`i^gmOeJ]U6^%Q'sM'V73>=G]Gee7d@Xt$q>(ka)5k8**b7&QH.8s4iTKBbqCV(mn9feaJlnTOo*F(i93<3=L3;l<EgEr$#6FVl9<$`WZTjIU3:I(%9W'CZ*E"8dR=.A*4'l67eo5!!NS.sdDlQi;,\F;bigtn/p0*ugj<8'`o"95;D5e93I<M;u`K\PP%EW3RbFqKa%X^Puh76&l232Wi%1rOO1T`igH4(:'PGat41^59.V2j1&"'ipKP$;oHOi_?K%Mj/gm^TV?C3smHf*?kkcOgTQn#G4f=Fph3s%`4M98_f'VM2Q)oZJQYT%<,I/DMU<p@D4mdt<_$g9FVV;ToQ"3C&DC>V2U4(\:uiu)AbIY?4cNKNKomrJD.Z'.<'IJm0=Q0agf;(6<5dA772^;TpeTAA8A&em%3it]WU71ngZsmX'ZJMKA`q2m^a9da,Bi/6T[8Lh7=!+jK7$$@!hQuW/<b[M+7^SocW]:g<]p"X#aO3KgZ;]a(BT:?sqR<<NR%5,Q%#g1aV]YL3ZkqIlSA4j=".\B.`*qmJ(7HUULWi*Jo2'GLJ&Q6d)P*FX)&^A7,9hs)h5eN7T^G]$5+_u$CG:Q-JE#+8=>Hed0P!#s.%<GF=B9HmY#BF_Is'_a6V9beS!4QP$t35KT[%G)<]#K(ien-#JB\m6N+2W*7eB?YfMQl8n[1h]?7VrDA_!oFW!60X38Y^35?mVAtp%0P85ibpEA-]XL0?iHC)F8Y"(\?3P;iq5t/OONsT:#a.\]V^n=*!NVC+`g<TX[AR#-0Sc7hI<9!$FeVFS1a>Ckp0781X#/tH[b+U(%\h&+r9Y:WXM?;XGAfTX9jpKJqhNh&L?4JHfj;8$adgNX\'MIs^8Dre;%P?f8<W&iMWCtgEWQtj&Vl79ZkbP5t&A1l24NqMh.V5>j%R^+Eu=<LL2m3$_N=^eS"+7_p8;0p+md_sX(0-)4\S-L@66jLAcn(64IDp`L'fQ\LeBNO=RY/,.q6$YQ2.^b:WDbI2e;[4<-&o[(b%gVF^cc6H&M+mKZW4g#>/BG]UhJIH$(R\^unh?2B-2f5L!>quU91rCaI(AD@m+Upq%3<=>10scrQ2TIq=GpNc990KUsaatD!j.%]G%c?rPi.];*EpKR9ZW\ij<WI\[K?]EHh^P[XL?IgCq\Rdb7-$@4`I\s4Dfn7eno#=b3XsenY`:54uXQ59Njnp;D3m0Gu`D^\t&&Z]S%kfsGCVl6j`\[)Imj3<W!"(-sT@jG!R3jV"0V*7uoLg@%+1+WZoMa?'9EXfOSc]i+>*IRUHdpUYYU>JqpkY-2gA`:oo$Ja6=jWdI.%ak?^&'TI,I]gP4BDR7t1W2i>pSO*p[iXoHq+'ZsddFdQ(hKa%^..*0YG*.b>$W/-k4^!kD=V"EcV1C_$-!3P_$<O0h@02hOQOPF)%8Qd2L%j"88cgF*ZNi3M*=`<%`ecX@Pp+H3$&Ih7q?.;q#GuY@u!k=\H?bni"k0g7:F5TI6[teYhl5]>AF/r^\%0m26en21:3(F_b%<VSETF.DAr7c1:VH>q6Cbud&fikn42$VTg2::)1is%]<7FK_PX+%gMQLEOPm1,'0<3QRfH%=MJ"Q;+T'dY,4%Z`*0Q1N+s]ppeYE%hcQF(0/U3PfC^#ip7p1VUU1=`;l;!\)a7(\rO2!M*A2Gl`WIbY`_l=>K2%NgRGkI'7Jc'Z-1nBEf<&XP?-sT:RpO^eGXk)gq"Vi.%_Wg)![N;FsW!:LeJ^K?J$B\_iX<rcW'r4ua<mr2Y>18OIZA&Xp#_jcR8>ed,@mKJ<hDN'IMU@hPA.]=51oWBmQ6@Z18YCY@PJFlm%DbJ3N,h6"A]P!L),C*b*D0FT:(Jq;>NcE!boXH+]pHVV(O:S2\>=mM4FV]s_:Bt!gpM)I-1RYe5W1'd'/15=`Uj3SQn'o1FQYm3W%Ac$T9(8m>-jVZS'.,V%D9C>sU)^?9h@u*gGiQT_+=F+=27HSke^(.eYiU=>NIUbbj(BYiqcaP/LeWafSRa?7V15MrR"i3W]9Lm2@%h>5b\OMKI]UhDmt;UEo7lN5_G^5-4e+q)V1+<bAj48.*U<`qjgi=E7eZD"(L0(+5rK4ZD/#PtlqKMcV?<ck/"_sLb%Rjp569"d(p%X4iNP=g<\!lHtcT@Ehqu#+?+:/To'rAEn848,3PQ.9e*EQ:t^^j`K&s7kqks2`2m6AF9u9`3/r&*u2Ss:O30T4F`MX4=hW-9P+;?%8`I]XTd#<"<EPOp6SP"2[RWXJR\m"ASfC=ob##pP6d?Q-&n9_0kVlLR$pe'[h+5cGUXW?pfq$3]m+rBAV"(""En02g[E_l0?F%S/%6BpJD8Nk\^f>IrVeJ@KaM4f:O?<T8`,!N,CFu<tsZ)5*T^"NcB1*4J;[%I<XK\\;JO#+ha)PTgSP]FN8m;hJC=r%?RXM.nV?KM>0%PT[iQOUO:>.S<:lK;&j"VbL!9)*454>0#='%M/Db-u.okW?gH"XO79.I014e.*e*rKrWRR/9]57m,$1FM/5'"(ADT[G$qe4q;np>%</n/Hqha]8$^\O59lmBMa`?S:c"cL&\-;H4>%*Akb8uDeE6tlF&ViIC,QZb;XX:XgCGmX`=`)`p5]bajaNLAm*[qD>bcrA7Wc"bR%W(g:O^0?Cj;W@ur@8cL*b`q+V#0fLfg.8J>B=]$$o:2G'Sg'V+,BZ[Ve5;9eGBQVka8BLL>kj\m()QjG9Ea9;/9/$u`;c4#UU<U/%!h8QP.>cu;#k0)_)OEhofj-pIB;@,.@YqomgGA'4=*f2C*edg_%NCJC\^?ZFVOt"(_4A9&msb'(iRN:i5'h\;K`$;edGs\f!^brj%s"G>dc*0cqjRpq#\]r@6X7nQ]rq=tDrS)i%cen^os80RU\@m1\l2H@KF6a?<DdKuYH#duraBa,Q^!3[c=1l.<&(-1N27q,>o^Aos%r-Kc[rpe+-Is/,Q5J?gddHAjEIK+ttqY8%CQ]F&n4akK9pX,&oQd*Rs+2.IFg%._'0E1V10+=OED"uu,+'uRhnc&Whd96A~>%AI9_PrivateDataEnd